// Code generated by protoc-gen-go. DO NOT EDIT.
// source: market-data-gateway.proto

package api

import (
	"github.com/ettec/open-trading-platform/go/model"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeRequest struct {
	ListingId            int32    `protobuf:"varint,1,opt,name=listingId,proto3" json:"listingId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed5cefd53299cb80, []int{0}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetListingId() int32 {
	if m != nil {
		return m.ListingId
	}
	return 0
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "marketdatagateway.SubscribeRequest")
}

func init() { proto.RegisterFile("market-data-gateway.proto", fileDescriptor_ed5cefd53299cb80) }

var fileDescriptor_ed5cefd53299cb80 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcc, 0x4d, 0x2c, 0xca,
	0x4e, 0x2d, 0xd1, 0x4d, 0x49, 0x2c, 0x49, 0xd4, 0x4d, 0x4f, 0x2c, 0x49, 0x2d, 0x4f, 0xac, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x84, 0x48, 0x81, 0x64, 0xa0, 0x12, 0x52, 0xfc, 0xc9,
	0x39, 0xf9, 0x49, 0x85, 0xa5, 0xf9, 0x25, 0xa9, 0x10, 0x35, 0x52, 0x82, 0xb9, 0xf9, 0x29, 0xa9,
	0x39, 0xc9, 0xf9, 0xb9, 0xb9, 0xf9, 0x79, 0x10, 0x21, 0x25, 0x03, 0x2e, 0x81, 0xe0, 0xd2, 0xa4,
	0xe2, 0xe4, 0xa2, 0xcc, 0xa4, 0xd4, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x19, 0x2e,
	0xce, 0x9c, 0xcc, 0xe2, 0x92, 0xcc, 0xbc, 0x74, 0xcf, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6,
	0x20, 0x84, 0x80, 0x51, 0x34, 0x97, 0xa0, 0x2f, 0xd8, 0x2a, 0x97, 0xc4, 0x92, 0x44, 0x77, 0x88,
	0x55, 0x42, 0x6e, 0x5c, 0xec, 0xce, 0xf9, 0x79, 0x79, 0xa9, 0xc9, 0x25, 0x42, 0xca, 0x7a, 0x18,
	0x2e, 0xd1, 0x43, 0xb7, 0x42, 0x4a, 0x40, 0x0f, 0xec, 0x14, 0x3d, 0xe7, 0x9c, 0xfc, 0xa4, 0x40,
	0x90, 0x0b, 0x95, 0x18, 0x34, 0x18, 0x0d, 0x18, 0x9d, 0x58, 0xa3, 0x98, 0x13, 0x0b, 0x32, 0x93,
	0xd8, 0xc0, 0x8e, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x07, 0x5b, 0x29, 0xf0, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MarketDataGatewayClient is the client API for MarketDataGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MarketDataGatewayClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (MarketDataGateway_ConnectClient, error)
}

type marketDataGatewayClient struct {
	cc *grpc.ClientConn
}

func NewMarketDataGatewayClient(cc *grpc.ClientConn) MarketDataGatewayClient {
	return &marketDataGatewayClient{cc}
}

func (c *marketDataGatewayClient) Connect(ctx context.Context, opts ...grpc.CallOption) (MarketDataGateway_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MarketDataGateway_serviceDesc.Streams[0], "/marketdatagateway.MarketDataGateway/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &marketDataGatewayConnectClient{stream}
	return x, nil
}

type MarketDataGateway_ConnectClient interface {
	Send(*SubscribeRequest) error
	Recv() (*model.ClobQuote, error)
	grpc.ClientStream
}

type marketDataGatewayConnectClient struct {
	grpc.ClientStream
}

func (x *marketDataGatewayConnectClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *marketDataGatewayConnectClient) Recv() (*model.ClobQuote, error) {
	m := new(model.ClobQuote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MarketDataGatewayServer is the server API for MarketDataGateway service.
type MarketDataGatewayServer interface {
	Connect(MarketDataGateway_ConnectServer) error
}

// UnimplementedMarketDataGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedMarketDataGatewayServer struct {
}

func (*UnimplementedMarketDataGatewayServer) Connect(srv MarketDataGateway_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterMarketDataGatewayServer(s *grpc.Server, srv MarketDataGatewayServer) {
	s.RegisterService(&_MarketDataGateway_serviceDesc, srv)
}

func _MarketDataGateway_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MarketDataGatewayServer).Connect(&marketDataGatewayConnectServer{stream})
}

type MarketDataGateway_ConnectServer interface {
	Send(*model.ClobQuote) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type marketDataGatewayConnectServer struct {
	grpc.ServerStream
}

func (x *marketDataGatewayConnectServer) Send(m *model.ClobQuote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *marketDataGatewayConnectServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MarketDataGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "marketdatagateway.MarketDataGateway",
	HandlerType: (*MarketDataGatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _MarketDataGateway_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "market-data-gateway.proto",
}
