// Code generated by protoc-gen-go. DO NOT EDIT.
// source: book-builder-strategy.proto

package api

import (
	"github.com/ettec/open-trading-platform/go/model"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BuildBookForListingParams struct {
	ListingId            int32    `protobuf:"varint,1,opt,name=listingId,proto3" json:"listingId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildBookForListingParams) Reset()         { *m = BuildBookForListingParams{} }
func (m *BuildBookForListingParams) String() string { return proto.CompactTextString(m) }
func (*BuildBookForListingParams) ProtoMessage()    {}
func (*BuildBookForListingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_95b4230aee025273, []int{0}
}

func (m *BuildBookForListingParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildBookForListingParams.Unmarshal(m, b)
}
func (m *BuildBookForListingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildBookForListingParams.Marshal(b, m, deterministic)
}
func (m *BuildBookForListingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildBookForListingParams.Merge(m, src)
}
func (m *BuildBookForListingParams) XXX_Size() int {
	return xxx_messageInfo_BuildBookForListingParams.Size(m)
}
func (m *BuildBookForListingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildBookForListingParams.DiscardUnknown(m)
}

var xxx_messageInfo_BuildBookForListingParams proto.InternalMessageInfo

func (m *BuildBookForListingParams) GetListingId() int32 {
	if m != nil {
		return m.ListingId
	}
	return 0
}

func init() {
	proto.RegisterType((*BuildBookForListingParams)(nil), "marketdataservice.BuildBookForListingParams")
}

func init() { proto.RegisterFile("book-builder-strategy.proto", fileDescriptor_95b4230aee025273) }

var fileDescriptor_95b4230aee025273 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0xca, 0xcf, 0xcf,
	0xd6, 0x4d, 0x2a, 0xcd, 0xcc, 0x49, 0x49, 0x2d, 0xd2, 0x2d, 0x2e, 0x29, 0x4a, 0x2c, 0x49, 0x4d,
	0xaf, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xcc, 0x4d, 0x2c, 0xca, 0x4e, 0x2d, 0x49,
	0x49, 0x2c, 0x49, 0x2c, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x95, 0x12, 0xcc, 0xcd, 0x4f, 0x49,
	0xcd, 0x49, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0xa8, 0x52, 0xb2, 0xe4, 0x92, 0x74, 0x02, 0xe9,
	0x77, 0xca, 0xcf, 0xcf, 0x76, 0xcb, 0x2f, 0xf2, 0xc9, 0x2c, 0x2e, 0xc9, 0xcc, 0x4b, 0x0f, 0x48,
	0x2c, 0x4a, 0xcc, 0x2d, 0x16, 0x92, 0xe1, 0xe2, 0xcc, 0x81, 0x08, 0x78, 0xa6, 0x48, 0x30, 0x2a,
	0x30, 0x6a, 0xb0, 0x06, 0x21, 0x04, 0x8c, 0xb2, 0xb8, 0x84, 0x41, 0xba, 0x9c, 0x20, 0xd6, 0x07,
	0x43, 0x6d, 0x17, 0x0a, 0xe6, 0x12, 0xc6, 0x62, 0xa2, 0x90, 0x8e, 0x1e, 0x86, 0x7b, 0xf4, 0x70,
	0xda, 0x2c, 0xc5, 0xa3, 0x07, 0x76, 0xaa, 0x9e, 0x6b, 0x6e, 0x41, 0x49, 0xa5, 0x12, 0x83, 0x13,
	0x6b, 0x14, 0x73, 0x62, 0x41, 0x66, 0x12, 0x1b, 0xd8, 0xd1, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xae, 0xfb, 0xf0, 0x3a, 0xf9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BookBuilderStrategyClient is the client API for BookBuilderStrategy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BookBuilderStrategyClient interface {
	BuildBookForListing(ctx context.Context, in *BuildBookForListingParams, opts ...grpc.CallOption) (*model.Empty, error)
}

type bookBuilderStrategyClient struct {
	cc *grpc.ClientConn
}

func NewBookBuilderStrategyClient(cc *grpc.ClientConn) BookBuilderStrategyClient {
	return &bookBuilderStrategyClient{cc}
}

func (c *bookBuilderStrategyClient) BuildBookForListing(ctx context.Context, in *BuildBookForListingParams, opts ...grpc.CallOption) (*model.Empty, error) {
	out := new(model.Empty)
	err := c.cc.Invoke(ctx, "/marketdataservice.BookBuilderStrategy/BuildBookForListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookBuilderStrategyServer is the server API for BookBuilderStrategy service.
type BookBuilderStrategyServer interface {
	BuildBookForListing(context.Context, *BuildBookForListingParams) (*model.Empty, error)
}

// UnimplementedBookBuilderStrategyServer can be embedded to have forward compatible implementations.
type UnimplementedBookBuilderStrategyServer struct {
}

func (*UnimplementedBookBuilderStrategyServer) BuildBookForListing(ctx context.Context, req *BuildBookForListingParams) (*model.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildBookForListing not implemented")
}

func RegisterBookBuilderStrategyServer(s *grpc.Server, srv BookBuilderStrategyServer) {
	s.RegisterService(&_BookBuilderStrategy_serviceDesc, srv)
}

func _BookBuilderStrategy_BuildBookForListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildBookForListingParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookBuilderStrategyServer).BuildBookForListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketdataservice.BookBuilderStrategy/BuildBookForListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookBuilderStrategyServer).BuildBookForListing(ctx, req.(*BuildBookForListingParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookBuilderStrategy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "marketdataservice.BookBuilderStrategy",
	HandlerType: (*BookBuilderStrategyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildBookForListing",
			Handler:    _BookBuilderStrategy_BuildBookForListing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book-builder-strategy.proto",
}
