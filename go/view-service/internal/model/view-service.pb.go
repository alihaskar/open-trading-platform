// Code generated by protoc-gen-go. DO NOT EDIT.
// source: view-service.proto

package model

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeToOrders struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeToOrders) Reset()         { *m = SubscribeToOrders{} }
func (m *SubscribeToOrders) String() string { return proto.CompactTextString(m) }
func (*SubscribeToOrders) ProtoMessage()    {}
func (*SubscribeToOrders) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9108c78ef26305a, []int{0}
}

func (m *SubscribeToOrders) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeToOrders.Unmarshal(m, b)
}
func (m *SubscribeToOrders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeToOrders.Marshal(b, m, deterministic)
}
func (m *SubscribeToOrders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeToOrders.Merge(m, src)
}
func (m *SubscribeToOrders) XXX_Size() int {
	return xxx_messageInfo_SubscribeToOrders.Size(m)
}
func (m *SubscribeToOrders) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeToOrders.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeToOrders proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SubscribeToOrders)(nil), "viewservice.SubscribeToOrders")
}

func init() { proto.RegisterFile("view-service.proto", fileDescriptor_e9108c78ef26305a) }

var fileDescriptor_e9108c78ef26305a = []byte{
	// 129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0xcb, 0x4c, 0x2d,
	0xd7, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x06, 0x89, 0x41, 0x85, 0xa4, 0xb8, 0xf3, 0x8b, 0x52, 0x52, 0x8b, 0x20, 0x32, 0x4a, 0xc2, 0x5c,
	0x82, 0xc1, 0xa5, 0x49, 0xc5, 0xc9, 0x45, 0x99, 0x49, 0xa9, 0x21, 0xf9, 0xfe, 0x20, 0x99, 0x62,
	0x23, 0x1f, 0x2e, 0xee, 0xb0, 0xcc, 0xd4, 0xf2, 0x60, 0x88, 0x06, 0x21, 0x5b, 0x2e, 0x4e, 0xb8,
	0x1a, 0x21, 0x39, 0x3d, 0x24, 0xb3, 0xf4, 0x30, 0xf4, 0x4a, 0xf1, 0xe8, 0xe5, 0xe6, 0xa7, 0xa4,
	0xe6, 0xe8, 0x81, 0xb9, 0x4a, 0x0c, 0x06, 0x8c, 0x4e, 0xec, 0x51, 0xac, 0x60, 0xa1, 0x24, 0x36,
	0xb0, 0x95, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x61, 0x86, 0xa6, 0xe9, 0xa2, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ViewServiceClient is the client API for ViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ViewServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeToOrders, opts ...grpc.CallOption) (ViewService_SubscribeClient, error)
}

type viewServiceClient struct {
	cc *grpc.ClientConn
}

func NewViewServiceClient(cc *grpc.ClientConn) ViewServiceClient {
	return &viewServiceClient{cc}
}

func (c *viewServiceClient) Subscribe(ctx context.Context, in *SubscribeToOrders, opts ...grpc.CallOption) (ViewService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[0], "/viewservice.ViewService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_SubscribeClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type viewServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *viewServiceSubscribeClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ViewServiceServer is the server API for ViewService service.
type ViewServiceServer interface {
	Subscribe(*SubscribeToOrders, ViewService_SubscribeServer) error
}

// UnimplementedViewServiceServer can be embedded to have forward compatible implementations.
type UnimplementedViewServiceServer struct {
}

func (*UnimplementedViewServiceServer) Subscribe(req *SubscribeToOrders, srv ViewService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterViewServiceServer(s *grpc.Server, srv ViewServiceServer) {
	s.RegisterService(&_ViewService_serviceDesc, srv)
}

func _ViewService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToOrders)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).Subscribe(m, &viewServiceSubscribeServer{stream})
}

type ViewService_SubscribeServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type viewServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *viewServiceSubscribeServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

var _ViewService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "viewservice.ViewService",
	HandlerType: (*ViewServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ViewService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "view-service.proto",
}
