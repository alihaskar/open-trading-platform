// Code generated by protoc-gen-go. DO NOT EDIT.
// source: session.proto

package model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MsgTypeEnum int32

const (
	MsgTypeEnum_MSG_TYPE_ADJUSTED_POSITION_REPORT                    MsgTypeEnum = 0
	MsgTypeEnum_MSG_TYPE_ADVERTISEMENT                               MsgTypeEnum = 1
	MsgTypeEnum_MSG_TYPE_ALLOCATION_INSTRUCTION                      MsgTypeEnum = 2
	MsgTypeEnum_MSG_TYPE_ALLOCATION_INSTRUCTION_ACK                  MsgTypeEnum = 3
	MsgTypeEnum_MSG_TYPE_ALLOCATION_INSTRUCTION_ALERT                MsgTypeEnum = 4
	MsgTypeEnum_MSG_TYPE_ALLOCATION_REPORT                           MsgTypeEnum = 5
	MsgTypeEnum_MSG_TYPE_ALLOCATION_REPORT_ACK                       MsgTypeEnum = 6
	MsgTypeEnum_MSG_TYPE_APPLICATION_MESSAGE_REPORT                  MsgTypeEnum = 7
	MsgTypeEnum_MSG_TYPE_APPLICATION_MESSAGE_REQUEST                 MsgTypeEnum = 8
	MsgTypeEnum_MSG_TYPE_APPLICATION_MESSAGE_REQUEST_ACK             MsgTypeEnum = 9
	MsgTypeEnum_MSG_TYPE_ASSIGNMENT_REPORT                           MsgTypeEnum = 10
	MsgTypeEnum_MSG_TYPE_BID_REQUEST                                 MsgTypeEnum = 11
	MsgTypeEnum_MSG_TYPE_BID_RESPONSE                                MsgTypeEnum = 12
	MsgTypeEnum_MSG_TYPE_BUSINESS_MESSAGE_REJECT                     MsgTypeEnum = 13
	MsgTypeEnum_MSG_TYPE_COLLATERAL_ASSIGNMENT                       MsgTypeEnum = 14
	MsgTypeEnum_MSG_TYPE_COLLATERAL_INQUIRY                          MsgTypeEnum = 15
	MsgTypeEnum_MSG_TYPE_COLLATERAL_INQUIRY_ACK                      MsgTypeEnum = 16
	MsgTypeEnum_MSG_TYPE_COLLATERAL_REPORT                           MsgTypeEnum = 17
	MsgTypeEnum_MSG_TYPE_COLLATERAL_REQUEST                          MsgTypeEnum = 18
	MsgTypeEnum_MSG_TYPE_COLLATERAL_RESPONSE                         MsgTypeEnum = 19
	MsgTypeEnum_MSG_TYPE_CONFIRMATION                                MsgTypeEnum = 20
	MsgTypeEnum_MSG_TYPE_CONFIRMATION_ACK                            MsgTypeEnum = 21
	MsgTypeEnum_MSG_TYPE_CONFIRMATION_REQUEST                        MsgTypeEnum = 22
	MsgTypeEnum_MSG_TYPE_CONTRARY_INTENTION_REPORT                   MsgTypeEnum = 23
	MsgTypeEnum_MSG_TYPE_CROSS_ORDER_CANCEL_REPLACE_REQUEST          MsgTypeEnum = 24
	MsgTypeEnum_MSG_TYPE_CROSS_ORDER_CANCEL_REQUEST                  MsgTypeEnum = 25
	MsgTypeEnum_MSG_TYPE_DERIVATIVE_SECURITY_LIST                    MsgTypeEnum = 26
	MsgTypeEnum_MSG_TYPE_DERIVATIVE_SECURITY_LIST_REQUEST            MsgTypeEnum = 27
	MsgTypeEnum_MSG_TYPE_DERIVATIVE_SECURITY_LIST_UPDATE_REPORT      MsgTypeEnum = 28
	MsgTypeEnum_MSG_TYPE_DONT_KNOW_TRADE                             MsgTypeEnum = 29
	MsgTypeEnum_MSG_TYPE_EMAIL                                       MsgTypeEnum = 30
	MsgTypeEnum_MSG_TYPE_EXECUTION_ACKNOWLEDGEMENT                   MsgTypeEnum = 31
	MsgTypeEnum_MSG_TYPE_EXECUTION_REPORT                            MsgTypeEnum = 32
	MsgTypeEnum_MSG_TYPE_HEARTBEAT                                   MsgTypeEnum = 33
	MsgTypeEnum_MSG_TYPE_IOI                                         MsgTypeEnum = 34
	MsgTypeEnum_MSG_TYPE_LIST_CANCEL_REQUEST                         MsgTypeEnum = 35
	MsgTypeEnum_MSG_TYPE_LIST_EXECUTE                                MsgTypeEnum = 36
	MsgTypeEnum_MSG_TYPE_LIST_STATUS                                 MsgTypeEnum = 37
	MsgTypeEnum_MSG_TYPE_LIST_STATUS_REQUEST                         MsgTypeEnum = 38
	MsgTypeEnum_MSG_TYPE_LIST_STRIKE_PRICE                           MsgTypeEnum = 39
	MsgTypeEnum_MSG_TYPE_LOGON                                       MsgTypeEnum = 40
	MsgTypeEnum_MSG_TYPE_LOGOUT                                      MsgTypeEnum = 41
	MsgTypeEnum_MSG_TYPE_MARKET_DATA_INCREMENTAL_REFRESH             MsgTypeEnum = 42
	MsgTypeEnum_MSG_TYPE_MARKET_DATA_REQUEST                         MsgTypeEnum = 43
	MsgTypeEnum_MSG_TYPE_MARKET_DATA_REQUEST_REJECT                  MsgTypeEnum = 44
	MsgTypeEnum_MSG_TYPE_MARKET_DATA_SNAPSHOT_FULL_REFRESH           MsgTypeEnum = 45
	MsgTypeEnum_MSG_TYPE_MARKET_DEFINITION                           MsgTypeEnum = 46
	MsgTypeEnum_MSG_TYPE_MARKET_DEFINITION_REQUEST                   MsgTypeEnum = 47
	MsgTypeEnum_MSG_TYPE_MARKET_DEFINITION_UPDATE_REPORT             MsgTypeEnum = 48
	MsgTypeEnum_MSG_TYPE_MASS_QUOTE                                  MsgTypeEnum = 49
	MsgTypeEnum_MSG_TYPE_MASS_QUOTE_ACKNOWLEDGEMENT                  MsgTypeEnum = 50
	MsgTypeEnum_MSG_TYPE_MULTILEG_ORDER_CANCEL_REPLACE               MsgTypeEnum = 51
	MsgTypeEnum_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST  MsgTypeEnum = 52
	MsgTypeEnum_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE MsgTypeEnum = 53
	MsgTypeEnum_MSG_TYPE_NEWS                                        MsgTypeEnum = 54
	MsgTypeEnum_MSG_TYPE_NEW_ORDER_CROSS                             MsgTypeEnum = 55
	MsgTypeEnum_MSG_TYPE_NEW_ORDER_LIST                              MsgTypeEnum = 56
	MsgTypeEnum_MSG_TYPE_NEW_ORDER_MULTILEG                          MsgTypeEnum = 57
	MsgTypeEnum_MSG_TYPE_NEW_ORDER_SINGLE                            MsgTypeEnum = 58
	MsgTypeEnum_MSG_TYPE_ORDER_CANCEL_REJECT                         MsgTypeEnum = 59
	MsgTypeEnum_MSG_TYPE_ORDER_CANCEL_REPLACE_REQUEST                MsgTypeEnum = 60
	MsgTypeEnum_MSG_TYPE_ORDER_CANCEL_REQUEST                        MsgTypeEnum = 61
	MsgTypeEnum_MSG_TYPE_ORDER_MASS_ACTION_REPORT                    MsgTypeEnum = 62
	MsgTypeEnum_MSG_TYPE_ORDER_MASS_ACTION_REQUEST                   MsgTypeEnum = 63
	MsgTypeEnum_MSG_TYPE_ORDER_MASS_CANCEL_REPORT                    MsgTypeEnum = 64
	MsgTypeEnum_MSG_TYPE_ORDER_MASS_CANCEL_REQUEST                   MsgTypeEnum = 65
	MsgTypeEnum_MSG_TYPE_ORDER_MASS_STATUS_REQUEST                   MsgTypeEnum = 66
	MsgTypeEnum_MSG_TYPE_ORDER_STATUS_REQUEST                        MsgTypeEnum = 67
	MsgTypeEnum_MSG_TYPE_POSITION_MAINTENANCE_REPORT                 MsgTypeEnum = 68
	MsgTypeEnum_MSG_TYPE_POSITION_MAINTENANCE_REQUEST                MsgTypeEnum = 69
	MsgTypeEnum_MSG_TYPE_POSITION_REPORT                             MsgTypeEnum = 70
	MsgTypeEnum_MSG_TYPE_QUOTE                                       MsgTypeEnum = 71
	MsgTypeEnum_MSG_TYPE_QUOTE_CANCEL                                MsgTypeEnum = 72
	MsgTypeEnum_MSG_TYPE_QUOTE_REQUEST                               MsgTypeEnum = 73
	MsgTypeEnum_MSG_TYPE_QUOTE_REQUEST_REJECT                        MsgTypeEnum = 74
	MsgTypeEnum_MSG_TYPE_QUOTE_RESPONSE                              MsgTypeEnum = 75
	MsgTypeEnum_MSG_TYPE_QUOTE_STATUS_REPORT                         MsgTypeEnum = 76
	MsgTypeEnum_MSG_TYPE_QUOTE_STATUS_REQUEST                        MsgTypeEnum = 77
	MsgTypeEnum_MSG_TYPE_REGISTRATION_INSTRUCTIONS                   MsgTypeEnum = 78
	MsgTypeEnum_MSG_TYPE_REGISTRATION_INSTRUCTIONS_RESPONSE          MsgTypeEnum = 79
	MsgTypeEnum_MSG_TYPE_REJECT                                      MsgTypeEnum = 80
	MsgTypeEnum_MSG_TYPE_REQUEST_FOR_POSITIONS                       MsgTypeEnum = 81
	MsgTypeEnum_MSG_TYPE_REQUEST_FOR_POSITIONS_ACK                   MsgTypeEnum = 82
	MsgTypeEnum_MSG_TYPE_RESEND_REQUEST                              MsgTypeEnum = 83
	MsgTypeEnum_MSG_TYPE_RFQ_REQUEST                                 MsgTypeEnum = 84
	MsgTypeEnum_MSG_TYPE_SECURITY_DEFINITION                         MsgTypeEnum = 85
	MsgTypeEnum_MSG_TYPE_SECURITY_DEFINITION_REQUEST                 MsgTypeEnum = 86
	MsgTypeEnum_MSG_TYPE_SECURITY_DEFINITION_UPDATE_REPORT           MsgTypeEnum = 87
	MsgTypeEnum_MSG_TYPE_SECURITY_LIST                               MsgTypeEnum = 88
	MsgTypeEnum_MSG_TYPE_SECURITY_LIST_REQUEST                       MsgTypeEnum = 89
	MsgTypeEnum_MSG_TYPE_SECURITY_LIST_UPDATE_REPORT                 MsgTypeEnum = 90
	MsgTypeEnum_MSG_TYPE_SECURITY_STATUS                             MsgTypeEnum = 91
	MsgTypeEnum_MSG_TYPE_SECURITY_STATUS_REQUEST                     MsgTypeEnum = 92
	MsgTypeEnum_MSG_TYPE_SECURITY_TYPES                              MsgTypeEnum = 93
	MsgTypeEnum_MSG_TYPE_SECURITY_TYPE_REQUEST                       MsgTypeEnum = 94
	MsgTypeEnum_MSG_TYPE_SEQUENCE_RESET                              MsgTypeEnum = 95
	MsgTypeEnum_MSG_TYPE_SETTLEMENT_INSTRUCTIONS                     MsgTypeEnum = 96
	MsgTypeEnum_MSG_TYPE_SETTLEMENT_INSTRUCTION_REQUEST              MsgTypeEnum = 97
	MsgTypeEnum_MSG_TYPE_SETTLEMENT_OBLIGATION_REPORT                MsgTypeEnum = 98
	MsgTypeEnum_MSG_TYPE_STREAM_ASSIGNMENT_REPORT                    MsgTypeEnum = 99
	MsgTypeEnum_MSG_TYPE_STREAM_ASSIGNMENT_REPORT_ACK                MsgTypeEnum = 100
	MsgTypeEnum_MSG_TYPE_STREAM_ASSIGNMENT_REQUEST                   MsgTypeEnum = 101
	MsgTypeEnum_MSG_TYPE_TEST_REQUEST                                MsgTypeEnum = 102
	MsgTypeEnum_MSG_TYPE_TRADE_CAPTURE_REPORT                        MsgTypeEnum = 103
	MsgTypeEnum_MSG_TYPE_TRADE_CAPTURE_REPORT_ACK                    MsgTypeEnum = 104
	MsgTypeEnum_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST                MsgTypeEnum = 105
	MsgTypeEnum_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST_ACK            MsgTypeEnum = 106
	MsgTypeEnum_MSG_TYPE_TRADING_SESSION_LIST                        MsgTypeEnum = 107
	MsgTypeEnum_MSG_TYPE_TRADING_SESSION_LIST_REQUEST                MsgTypeEnum = 108
	MsgTypeEnum_MSG_TYPE_TRADING_SESSION_LIST_UPDATE_REPORT          MsgTypeEnum = 109
	MsgTypeEnum_MSG_TYPE_TRADING_SESSION_STATUS                      MsgTypeEnum = 110
	MsgTypeEnum_MSG_TYPE_TRADING_SESSION_STATUS_REQUEST              MsgTypeEnum = 111
	MsgTypeEnum_MSG_TYPE_UNSPECIFIED                                 MsgTypeEnum = 112
	MsgTypeEnum_MSG_TYPE_USER_NOTIFICATION                           MsgTypeEnum = 113
	MsgTypeEnum_MSG_TYPE_USER_REQUEST                                MsgTypeEnum = 114
	MsgTypeEnum_MSG_TYPE_USER_RESPONSE                               MsgTypeEnum = 115
	MsgTypeEnum_MSG_TYPE_XMLNON_FIX                                  MsgTypeEnum = 116
)

var MsgTypeEnum_name = map[int32]string{
	0:   "MSG_TYPE_ADJUSTED_POSITION_REPORT",
	1:   "MSG_TYPE_ADVERTISEMENT",
	2:   "MSG_TYPE_ALLOCATION_INSTRUCTION",
	3:   "MSG_TYPE_ALLOCATION_INSTRUCTION_ACK",
	4:   "MSG_TYPE_ALLOCATION_INSTRUCTION_ALERT",
	5:   "MSG_TYPE_ALLOCATION_REPORT",
	6:   "MSG_TYPE_ALLOCATION_REPORT_ACK",
	7:   "MSG_TYPE_APPLICATION_MESSAGE_REPORT",
	8:   "MSG_TYPE_APPLICATION_MESSAGE_REQUEST",
	9:   "MSG_TYPE_APPLICATION_MESSAGE_REQUEST_ACK",
	10:  "MSG_TYPE_ASSIGNMENT_REPORT",
	11:  "MSG_TYPE_BID_REQUEST",
	12:  "MSG_TYPE_BID_RESPONSE",
	13:  "MSG_TYPE_BUSINESS_MESSAGE_REJECT",
	14:  "MSG_TYPE_COLLATERAL_ASSIGNMENT",
	15:  "MSG_TYPE_COLLATERAL_INQUIRY",
	16:  "MSG_TYPE_COLLATERAL_INQUIRY_ACK",
	17:  "MSG_TYPE_COLLATERAL_REPORT",
	18:  "MSG_TYPE_COLLATERAL_REQUEST",
	19:  "MSG_TYPE_COLLATERAL_RESPONSE",
	20:  "MSG_TYPE_CONFIRMATION",
	21:  "MSG_TYPE_CONFIRMATION_ACK",
	22:  "MSG_TYPE_CONFIRMATION_REQUEST",
	23:  "MSG_TYPE_CONTRARY_INTENTION_REPORT",
	24:  "MSG_TYPE_CROSS_ORDER_CANCEL_REPLACE_REQUEST",
	25:  "MSG_TYPE_CROSS_ORDER_CANCEL_REQUEST",
	26:  "MSG_TYPE_DERIVATIVE_SECURITY_LIST",
	27:  "MSG_TYPE_DERIVATIVE_SECURITY_LIST_REQUEST",
	28:  "MSG_TYPE_DERIVATIVE_SECURITY_LIST_UPDATE_REPORT",
	29:  "MSG_TYPE_DONT_KNOW_TRADE",
	30:  "MSG_TYPE_EMAIL",
	31:  "MSG_TYPE_EXECUTION_ACKNOWLEDGEMENT",
	32:  "MSG_TYPE_EXECUTION_REPORT",
	33:  "MSG_TYPE_HEARTBEAT",
	34:  "MSG_TYPE_IOI",
	35:  "MSG_TYPE_LIST_CANCEL_REQUEST",
	36:  "MSG_TYPE_LIST_EXECUTE",
	37:  "MSG_TYPE_LIST_STATUS",
	38:  "MSG_TYPE_LIST_STATUS_REQUEST",
	39:  "MSG_TYPE_LIST_STRIKE_PRICE",
	40:  "MSG_TYPE_LOGON",
	41:  "MSG_TYPE_LOGOUT",
	42:  "MSG_TYPE_MARKET_DATA_INCREMENTAL_REFRESH",
	43:  "MSG_TYPE_MARKET_DATA_REQUEST",
	44:  "MSG_TYPE_MARKET_DATA_REQUEST_REJECT",
	45:  "MSG_TYPE_MARKET_DATA_SNAPSHOT_FULL_REFRESH",
	46:  "MSG_TYPE_MARKET_DEFINITION",
	47:  "MSG_TYPE_MARKET_DEFINITION_REQUEST",
	48:  "MSG_TYPE_MARKET_DEFINITION_UPDATE_REPORT",
	49:  "MSG_TYPE_MASS_QUOTE",
	50:  "MSG_TYPE_MASS_QUOTE_ACKNOWLEDGEMENT",
	51:  "MSG_TYPE_MULTILEG_ORDER_CANCEL_REPLACE",
	52:  "MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST",
	53:  "MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE",
	54:  "MSG_TYPE_NEWS",
	55:  "MSG_TYPE_NEW_ORDER_CROSS",
	56:  "MSG_TYPE_NEW_ORDER_LIST",
	57:  "MSG_TYPE_NEW_ORDER_MULTILEG",
	58:  "MSG_TYPE_NEW_ORDER_SINGLE",
	59:  "MSG_TYPE_ORDER_CANCEL_REJECT",
	60:  "MSG_TYPE_ORDER_CANCEL_REPLACE_REQUEST",
	61:  "MSG_TYPE_ORDER_CANCEL_REQUEST",
	62:  "MSG_TYPE_ORDER_MASS_ACTION_REPORT",
	63:  "MSG_TYPE_ORDER_MASS_ACTION_REQUEST",
	64:  "MSG_TYPE_ORDER_MASS_CANCEL_REPORT",
	65:  "MSG_TYPE_ORDER_MASS_CANCEL_REQUEST",
	66:  "MSG_TYPE_ORDER_MASS_STATUS_REQUEST",
	67:  "MSG_TYPE_ORDER_STATUS_REQUEST",
	68:  "MSG_TYPE_POSITION_MAINTENANCE_REPORT",
	69:  "MSG_TYPE_POSITION_MAINTENANCE_REQUEST",
	70:  "MSG_TYPE_POSITION_REPORT",
	71:  "MSG_TYPE_QUOTE",
	72:  "MSG_TYPE_QUOTE_CANCEL",
	73:  "MSG_TYPE_QUOTE_REQUEST",
	74:  "MSG_TYPE_QUOTE_REQUEST_REJECT",
	75:  "MSG_TYPE_QUOTE_RESPONSE",
	76:  "MSG_TYPE_QUOTE_STATUS_REPORT",
	77:  "MSG_TYPE_QUOTE_STATUS_REQUEST",
	78:  "MSG_TYPE_REGISTRATION_INSTRUCTIONS",
	79:  "MSG_TYPE_REGISTRATION_INSTRUCTIONS_RESPONSE",
	80:  "MSG_TYPE_REJECT",
	81:  "MSG_TYPE_REQUEST_FOR_POSITIONS",
	82:  "MSG_TYPE_REQUEST_FOR_POSITIONS_ACK",
	83:  "MSG_TYPE_RESEND_REQUEST",
	84:  "MSG_TYPE_RFQ_REQUEST",
	85:  "MSG_TYPE_SECURITY_DEFINITION",
	86:  "MSG_TYPE_SECURITY_DEFINITION_REQUEST",
	87:  "MSG_TYPE_SECURITY_DEFINITION_UPDATE_REPORT",
	88:  "MSG_TYPE_SECURITY_LIST",
	89:  "MSG_TYPE_SECURITY_LIST_REQUEST",
	90:  "MSG_TYPE_SECURITY_LIST_UPDATE_REPORT",
	91:  "MSG_TYPE_SECURITY_STATUS",
	92:  "MSG_TYPE_SECURITY_STATUS_REQUEST",
	93:  "MSG_TYPE_SECURITY_TYPES",
	94:  "MSG_TYPE_SECURITY_TYPE_REQUEST",
	95:  "MSG_TYPE_SEQUENCE_RESET",
	96:  "MSG_TYPE_SETTLEMENT_INSTRUCTIONS",
	97:  "MSG_TYPE_SETTLEMENT_INSTRUCTION_REQUEST",
	98:  "MSG_TYPE_SETTLEMENT_OBLIGATION_REPORT",
	99:  "MSG_TYPE_STREAM_ASSIGNMENT_REPORT",
	100: "MSG_TYPE_STREAM_ASSIGNMENT_REPORT_ACK",
	101: "MSG_TYPE_STREAM_ASSIGNMENT_REQUEST",
	102: "MSG_TYPE_TEST_REQUEST",
	103: "MSG_TYPE_TRADE_CAPTURE_REPORT",
	104: "MSG_TYPE_TRADE_CAPTURE_REPORT_ACK",
	105: "MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST",
	106: "MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST_ACK",
	107: "MSG_TYPE_TRADING_SESSION_LIST",
	108: "MSG_TYPE_TRADING_SESSION_LIST_REQUEST",
	109: "MSG_TYPE_TRADING_SESSION_LIST_UPDATE_REPORT",
	110: "MSG_TYPE_TRADING_SESSION_STATUS",
	111: "MSG_TYPE_TRADING_SESSION_STATUS_REQUEST",
	112: "MSG_TYPE_UNSPECIFIED",
	113: "MSG_TYPE_USER_NOTIFICATION",
	114: "MSG_TYPE_USER_REQUEST",
	115: "MSG_TYPE_USER_RESPONSE",
	116: "MSG_TYPE_XMLNON_FIX",
}

var MsgTypeEnum_value = map[string]int32{
	"MSG_TYPE_ADJUSTED_POSITION_REPORT":                    0,
	"MSG_TYPE_ADVERTISEMENT":                               1,
	"MSG_TYPE_ALLOCATION_INSTRUCTION":                      2,
	"MSG_TYPE_ALLOCATION_INSTRUCTION_ACK":                  3,
	"MSG_TYPE_ALLOCATION_INSTRUCTION_ALERT":                4,
	"MSG_TYPE_ALLOCATION_REPORT":                           5,
	"MSG_TYPE_ALLOCATION_REPORT_ACK":                       6,
	"MSG_TYPE_APPLICATION_MESSAGE_REPORT":                  7,
	"MSG_TYPE_APPLICATION_MESSAGE_REQUEST":                 8,
	"MSG_TYPE_APPLICATION_MESSAGE_REQUEST_ACK":             9,
	"MSG_TYPE_ASSIGNMENT_REPORT":                           10,
	"MSG_TYPE_BID_REQUEST":                                 11,
	"MSG_TYPE_BID_RESPONSE":                                12,
	"MSG_TYPE_BUSINESS_MESSAGE_REJECT":                     13,
	"MSG_TYPE_COLLATERAL_ASSIGNMENT":                       14,
	"MSG_TYPE_COLLATERAL_INQUIRY":                          15,
	"MSG_TYPE_COLLATERAL_INQUIRY_ACK":                      16,
	"MSG_TYPE_COLLATERAL_REPORT":                           17,
	"MSG_TYPE_COLLATERAL_REQUEST":                          18,
	"MSG_TYPE_COLLATERAL_RESPONSE":                         19,
	"MSG_TYPE_CONFIRMATION":                                20,
	"MSG_TYPE_CONFIRMATION_ACK":                            21,
	"MSG_TYPE_CONFIRMATION_REQUEST":                        22,
	"MSG_TYPE_CONTRARY_INTENTION_REPORT":                   23,
	"MSG_TYPE_CROSS_ORDER_CANCEL_REPLACE_REQUEST":          24,
	"MSG_TYPE_CROSS_ORDER_CANCEL_REQUEST":                  25,
	"MSG_TYPE_DERIVATIVE_SECURITY_LIST":                    26,
	"MSG_TYPE_DERIVATIVE_SECURITY_LIST_REQUEST":            27,
	"MSG_TYPE_DERIVATIVE_SECURITY_LIST_UPDATE_REPORT":      28,
	"MSG_TYPE_DONT_KNOW_TRADE":                             29,
	"MSG_TYPE_EMAIL":                                       30,
	"MSG_TYPE_EXECUTION_ACKNOWLEDGEMENT":                   31,
	"MSG_TYPE_EXECUTION_REPORT":                            32,
	"MSG_TYPE_HEARTBEAT":                                   33,
	"MSG_TYPE_IOI":                                         34,
	"MSG_TYPE_LIST_CANCEL_REQUEST":                         35,
	"MSG_TYPE_LIST_EXECUTE":                                36,
	"MSG_TYPE_LIST_STATUS":                                 37,
	"MSG_TYPE_LIST_STATUS_REQUEST":                         38,
	"MSG_TYPE_LIST_STRIKE_PRICE":                           39,
	"MSG_TYPE_LOGON":                                       40,
	"MSG_TYPE_LOGOUT":                                      41,
	"MSG_TYPE_MARKET_DATA_INCREMENTAL_REFRESH":             42,
	"MSG_TYPE_MARKET_DATA_REQUEST":                         43,
	"MSG_TYPE_MARKET_DATA_REQUEST_REJECT":                  44,
	"MSG_TYPE_MARKET_DATA_SNAPSHOT_FULL_REFRESH":           45,
	"MSG_TYPE_MARKET_DEFINITION":                           46,
	"MSG_TYPE_MARKET_DEFINITION_REQUEST":                   47,
	"MSG_TYPE_MARKET_DEFINITION_UPDATE_REPORT":             48,
	"MSG_TYPE_MASS_QUOTE":                                  49,
	"MSG_TYPE_MASS_QUOTE_ACKNOWLEDGEMENT":                  50,
	"MSG_TYPE_MULTILEG_ORDER_CANCEL_REPLACE":               51,
	"MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST":  52,
	"MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE": 53,
	"MSG_TYPE_NEWS":                                        54,
	"MSG_TYPE_NEW_ORDER_CROSS":                             55,
	"MSG_TYPE_NEW_ORDER_LIST":                              56,
	"MSG_TYPE_NEW_ORDER_MULTILEG":                          57,
	"MSG_TYPE_NEW_ORDER_SINGLE":                            58,
	"MSG_TYPE_ORDER_CANCEL_REJECT":                         59,
	"MSG_TYPE_ORDER_CANCEL_REPLACE_REQUEST":                60,
	"MSG_TYPE_ORDER_CANCEL_REQUEST":                        61,
	"MSG_TYPE_ORDER_MASS_ACTION_REPORT":                    62,
	"MSG_TYPE_ORDER_MASS_ACTION_REQUEST":                   63,
	"MSG_TYPE_ORDER_MASS_CANCEL_REPORT":                    64,
	"MSG_TYPE_ORDER_MASS_CANCEL_REQUEST":                   65,
	"MSG_TYPE_ORDER_MASS_STATUS_REQUEST":                   66,
	"MSG_TYPE_ORDER_STATUS_REQUEST":                        67,
	"MSG_TYPE_POSITION_MAINTENANCE_REPORT":                 68,
	"MSG_TYPE_POSITION_MAINTENANCE_REQUEST":                69,
	"MSG_TYPE_POSITION_REPORT":                             70,
	"MSG_TYPE_QUOTE":                                       71,
	"MSG_TYPE_QUOTE_CANCEL":                                72,
	"MSG_TYPE_QUOTE_REQUEST":                               73,
	"MSG_TYPE_QUOTE_REQUEST_REJECT":                        74,
	"MSG_TYPE_QUOTE_RESPONSE":                              75,
	"MSG_TYPE_QUOTE_STATUS_REPORT":                         76,
	"MSG_TYPE_QUOTE_STATUS_REQUEST":                        77,
	"MSG_TYPE_REGISTRATION_INSTRUCTIONS":                   78,
	"MSG_TYPE_REGISTRATION_INSTRUCTIONS_RESPONSE":          79,
	"MSG_TYPE_REJECT":                                      80,
	"MSG_TYPE_REQUEST_FOR_POSITIONS":                       81,
	"MSG_TYPE_REQUEST_FOR_POSITIONS_ACK":                   82,
	"MSG_TYPE_RESEND_REQUEST":                              83,
	"MSG_TYPE_RFQ_REQUEST":                                 84,
	"MSG_TYPE_SECURITY_DEFINITION":                         85,
	"MSG_TYPE_SECURITY_DEFINITION_REQUEST":                 86,
	"MSG_TYPE_SECURITY_DEFINITION_UPDATE_REPORT":           87,
	"MSG_TYPE_SECURITY_LIST":                               88,
	"MSG_TYPE_SECURITY_LIST_REQUEST":                       89,
	"MSG_TYPE_SECURITY_LIST_UPDATE_REPORT":                 90,
	"MSG_TYPE_SECURITY_STATUS":                             91,
	"MSG_TYPE_SECURITY_STATUS_REQUEST":                     92,
	"MSG_TYPE_SECURITY_TYPES":                              93,
	"MSG_TYPE_SECURITY_TYPE_REQUEST":                       94,
	"MSG_TYPE_SEQUENCE_RESET":                              95,
	"MSG_TYPE_SETTLEMENT_INSTRUCTIONS":                     96,
	"MSG_TYPE_SETTLEMENT_INSTRUCTION_REQUEST":              97,
	"MSG_TYPE_SETTLEMENT_OBLIGATION_REPORT":                98,
	"MSG_TYPE_STREAM_ASSIGNMENT_REPORT":                    99,
	"MSG_TYPE_STREAM_ASSIGNMENT_REPORT_ACK":                100,
	"MSG_TYPE_STREAM_ASSIGNMENT_REQUEST":                   101,
	"MSG_TYPE_TEST_REQUEST":                                102,
	"MSG_TYPE_TRADE_CAPTURE_REPORT":                        103,
	"MSG_TYPE_TRADE_CAPTURE_REPORT_ACK":                    104,
	"MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST":                105,
	"MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST_ACK":            106,
	"MSG_TYPE_TRADING_SESSION_LIST":                        107,
	"MSG_TYPE_TRADING_SESSION_LIST_REQUEST":                108,
	"MSG_TYPE_TRADING_SESSION_LIST_UPDATE_REPORT":          109,
	"MSG_TYPE_TRADING_SESSION_STATUS":                      110,
	"MSG_TYPE_TRADING_SESSION_STATUS_REQUEST":              111,
	"MSG_TYPE_UNSPECIFIED":                                 112,
	"MSG_TYPE_USER_NOTIFICATION":                           113,
	"MSG_TYPE_USER_REQUEST":                                114,
	"MSG_TYPE_USER_RESPONSE":                               115,
	"MSG_TYPE_XMLNON_FIX":                                  116,
}

func (x MsgTypeEnum) String() string {
	return proto.EnumName(MsgTypeEnum_name, int32(x))
}

func (MsgTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{0}
}

type ApplVerIDEnum int32

const (
	ApplVerIDEnum_APPL_VER_ID_UNSPECIFIED ApplVerIDEnum = 0
	ApplVerIDEnum_APPL_VER_ID_FIX27       ApplVerIDEnum = 1
	ApplVerIDEnum_APPL_VER_ID_FIX30       ApplVerIDEnum = 2
	ApplVerIDEnum_APPL_VER_ID_FIX40       ApplVerIDEnum = 3
	ApplVerIDEnum_APPL_VER_ID_FIX41       ApplVerIDEnum = 4
	ApplVerIDEnum_APPL_VER_ID_FIX42       ApplVerIDEnum = 5
	ApplVerIDEnum_APPL_VER_ID_FIX43       ApplVerIDEnum = 6
	ApplVerIDEnum_APPL_VER_ID_FIX44       ApplVerIDEnum = 7
	ApplVerIDEnum_APPL_VER_ID_FIX50       ApplVerIDEnum = 8
	ApplVerIDEnum_APPL_VER_ID_FIX50SP1    ApplVerIDEnum = 9
	ApplVerIDEnum_APPL_VER_ID_FIX50SP2    ApplVerIDEnum = 10
)

var ApplVerIDEnum_name = map[int32]string{
	0:  "APPL_VER_ID_UNSPECIFIED",
	1:  "APPL_VER_ID_FIX27",
	2:  "APPL_VER_ID_FIX30",
	3:  "APPL_VER_ID_FIX40",
	4:  "APPL_VER_ID_FIX41",
	5:  "APPL_VER_ID_FIX42",
	6:  "APPL_VER_ID_FIX43",
	7:  "APPL_VER_ID_FIX44",
	8:  "APPL_VER_ID_FIX50",
	9:  "APPL_VER_ID_FIX50SP1",
	10: "APPL_VER_ID_FIX50SP2",
}

var ApplVerIDEnum_value = map[string]int32{
	"APPL_VER_ID_UNSPECIFIED": 0,
	"APPL_VER_ID_FIX27":       1,
	"APPL_VER_ID_FIX30":       2,
	"APPL_VER_ID_FIX40":       3,
	"APPL_VER_ID_FIX41":       4,
	"APPL_VER_ID_FIX42":       5,
	"APPL_VER_ID_FIX43":       6,
	"APPL_VER_ID_FIX44":       7,
	"APPL_VER_ID_FIX50":       8,
	"APPL_VER_ID_FIX50SP1":    9,
	"APPL_VER_ID_FIX50SP2":    10,
}

func (x ApplVerIDEnum) String() string {
	return proto.EnumName(ApplVerIDEnum_name, int32(x))
}

func (ApplVerIDEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{1}
}

type RefMsgTypeEnum int32

const (
	RefMsgTypeEnum_REF_MSG_TYPE_ADJUSTED_POSITION_REPORT                    RefMsgTypeEnum = 0
	RefMsgTypeEnum_REF_MSG_TYPE_ADVERTISEMENT                               RefMsgTypeEnum = 1
	RefMsgTypeEnum_REF_MSG_TYPE_ALLOCATION_INSTRUCTION                      RefMsgTypeEnum = 2
	RefMsgTypeEnum_REF_MSG_TYPE_ALLOCATION_INSTRUCTION_ACK                  RefMsgTypeEnum = 3
	RefMsgTypeEnum_REF_MSG_TYPE_ALLOCATION_INSTRUCTION_ALERT                RefMsgTypeEnum = 4
	RefMsgTypeEnum_REF_MSG_TYPE_ALLOCATION_REPORT                           RefMsgTypeEnum = 5
	RefMsgTypeEnum_REF_MSG_TYPE_ALLOCATION_REPORT_ACK                       RefMsgTypeEnum = 6
	RefMsgTypeEnum_REF_MSG_TYPE_APPLICATION_MESSAGE_REPORT                  RefMsgTypeEnum = 7
	RefMsgTypeEnum_REF_MSG_TYPE_APPLICATION_MESSAGE_REQUEST                 RefMsgTypeEnum = 8
	RefMsgTypeEnum_REF_MSG_TYPE_APPLICATION_MESSAGE_REQUEST_ACK             RefMsgTypeEnum = 9
	RefMsgTypeEnum_REF_MSG_TYPE_ASSIGNMENT_REPORT                           RefMsgTypeEnum = 10
	RefMsgTypeEnum_REF_MSG_TYPE_BID_REQUEST                                 RefMsgTypeEnum = 11
	RefMsgTypeEnum_REF_MSG_TYPE_BID_RESPONSE                                RefMsgTypeEnum = 12
	RefMsgTypeEnum_REF_MSG_TYPE_BUSINESS_MESSAGE_REJECT                     RefMsgTypeEnum = 13
	RefMsgTypeEnum_REF_MSG_TYPE_COLLATERAL_ASSIGNMENT                       RefMsgTypeEnum = 14
	RefMsgTypeEnum_REF_MSG_TYPE_COLLATERAL_INQUIRY                          RefMsgTypeEnum = 15
	RefMsgTypeEnum_REF_MSG_TYPE_COLLATERAL_INQUIRY_ACK                      RefMsgTypeEnum = 16
	RefMsgTypeEnum_REF_MSG_TYPE_COLLATERAL_REPORT                           RefMsgTypeEnum = 17
	RefMsgTypeEnum_REF_MSG_TYPE_COLLATERAL_REQUEST                          RefMsgTypeEnum = 18
	RefMsgTypeEnum_REF_MSG_TYPE_COLLATERAL_RESPONSE                         RefMsgTypeEnum = 19
	RefMsgTypeEnum_REF_MSG_TYPE_CONFIRMATION                                RefMsgTypeEnum = 20
	RefMsgTypeEnum_REF_MSG_TYPE_CONFIRMATION_ACK                            RefMsgTypeEnum = 21
	RefMsgTypeEnum_REF_MSG_TYPE_CONFIRMATION_REQUEST                        RefMsgTypeEnum = 22
	RefMsgTypeEnum_REF_MSG_TYPE_CONTRARY_INTENTION_REPORT                   RefMsgTypeEnum = 23
	RefMsgTypeEnum_REF_MSG_TYPE_CROSS_ORDER_CANCEL_REPLACE_REQUEST          RefMsgTypeEnum = 24
	RefMsgTypeEnum_REF_MSG_TYPE_CROSS_ORDER_CANCEL_REQUEST                  RefMsgTypeEnum = 25
	RefMsgTypeEnum_REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST                    RefMsgTypeEnum = 26
	RefMsgTypeEnum_REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST_REQUEST            RefMsgTypeEnum = 27
	RefMsgTypeEnum_REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST_UPDATE_REPORT      RefMsgTypeEnum = 28
	RefMsgTypeEnum_REF_MSG_TYPE_DONT_KNOW_TRADE                             RefMsgTypeEnum = 29
	RefMsgTypeEnum_REF_MSG_TYPE_EMAIL                                       RefMsgTypeEnum = 30
	RefMsgTypeEnum_REF_MSG_TYPE_EXECUTION_ACKNOWLEDGEMENT                   RefMsgTypeEnum = 31
	RefMsgTypeEnum_REF_MSG_TYPE_EXECUTION_REPORT                            RefMsgTypeEnum = 32
	RefMsgTypeEnum_REF_MSG_TYPE_HEARTBEAT                                   RefMsgTypeEnum = 33
	RefMsgTypeEnum_REF_MSG_TYPE_IOI                                         RefMsgTypeEnum = 34
	RefMsgTypeEnum_REF_MSG_TYPE_LIST_CANCEL_REQUEST                         RefMsgTypeEnum = 35
	RefMsgTypeEnum_REF_MSG_TYPE_LIST_EXECUTE                                RefMsgTypeEnum = 36
	RefMsgTypeEnum_REF_MSG_TYPE_LIST_STATUS                                 RefMsgTypeEnum = 37
	RefMsgTypeEnum_REF_MSG_TYPE_LIST_STATUS_REQUEST                         RefMsgTypeEnum = 38
	RefMsgTypeEnum_REF_MSG_TYPE_LIST_STRIKE_PRICE                           RefMsgTypeEnum = 39
	RefMsgTypeEnum_REF_MSG_TYPE_LOGON                                       RefMsgTypeEnum = 40
	RefMsgTypeEnum_REF_MSG_TYPE_LOGOUT                                      RefMsgTypeEnum = 41
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DATA_INCREMENTAL_REFRESH             RefMsgTypeEnum = 42
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DATA_REQUEST                         RefMsgTypeEnum = 43
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DATA_REQUEST_REJECT                  RefMsgTypeEnum = 44
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DATA_SNAPSHOT_FULL_REFRESH           RefMsgTypeEnum = 45
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DEFINITION                           RefMsgTypeEnum = 46
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DEFINITION_REQUEST                   RefMsgTypeEnum = 47
	RefMsgTypeEnum_REF_MSG_TYPE_MARKET_DEFINITION_UPDATE_REPORT             RefMsgTypeEnum = 48
	RefMsgTypeEnum_REF_MSG_TYPE_MASS_QUOTE                                  RefMsgTypeEnum = 49
	RefMsgTypeEnum_REF_MSG_TYPE_MASS_QUOTE_ACKNOWLEDGEMENT                  RefMsgTypeEnum = 50
	RefMsgTypeEnum_REF_MSG_TYPE_MULTILEG_ORDER_CANCEL_REPLACE               RefMsgTypeEnum = 51
	RefMsgTypeEnum_REF_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST  RefMsgTypeEnum = 52
	RefMsgTypeEnum_REF_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE RefMsgTypeEnum = 53
	RefMsgTypeEnum_REF_MSG_TYPE_NEWS                                        RefMsgTypeEnum = 54
	RefMsgTypeEnum_REF_MSG_TYPE_NEW_ORDER_CROSS                             RefMsgTypeEnum = 55
	RefMsgTypeEnum_REF_MSG_TYPE_NEW_ORDER_LIST                              RefMsgTypeEnum = 56
	RefMsgTypeEnum_REF_MSG_TYPE_NEW_ORDER_MULTILEG                          RefMsgTypeEnum = 57
	RefMsgTypeEnum_REF_MSG_TYPE_NEW_ORDER_SINGLE                            RefMsgTypeEnum = 58
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_CANCEL_REJECT                         RefMsgTypeEnum = 59
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_CANCEL_REPLACE_REQUEST                RefMsgTypeEnum = 60
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_CANCEL_REQUEST                        RefMsgTypeEnum = 61
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_MASS_ACTION_REPORT                    RefMsgTypeEnum = 62
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_MASS_ACTION_REQUEST                   RefMsgTypeEnum = 63
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_MASS_CANCEL_REPORT                    RefMsgTypeEnum = 64
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_MASS_CANCEL_REQUEST                   RefMsgTypeEnum = 65
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_MASS_STATUS_REQUEST                   RefMsgTypeEnum = 66
	RefMsgTypeEnum_REF_MSG_TYPE_ORDER_STATUS_REQUEST                        RefMsgTypeEnum = 67
	RefMsgTypeEnum_REF_MSG_TYPE_POSITION_MAINTENANCE_REPORT                 RefMsgTypeEnum = 68
	RefMsgTypeEnum_REF_MSG_TYPE_POSITION_MAINTENANCE_REQUEST                RefMsgTypeEnum = 69
	RefMsgTypeEnum_REF_MSG_TYPE_POSITION_REPORT                             RefMsgTypeEnum = 70
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE                                       RefMsgTypeEnum = 71
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE_CANCEL                                RefMsgTypeEnum = 72
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE_REQUEST                               RefMsgTypeEnum = 73
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE_REQUEST_REJECT                        RefMsgTypeEnum = 74
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE_RESPONSE                              RefMsgTypeEnum = 75
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE_STATUS_REPORT                         RefMsgTypeEnum = 76
	RefMsgTypeEnum_REF_MSG_TYPE_QUOTE_STATUS_REQUEST                        RefMsgTypeEnum = 77
	RefMsgTypeEnum_REF_MSG_TYPE_REGISTRATION_INSTRUCTIONS                   RefMsgTypeEnum = 78
	RefMsgTypeEnum_REF_MSG_TYPE_REGISTRATION_INSTRUCTIONS_RESPONSE          RefMsgTypeEnum = 79
	RefMsgTypeEnum_REF_MSG_TYPE_REJECT                                      RefMsgTypeEnum = 80
	RefMsgTypeEnum_REF_MSG_TYPE_REQUEST_FOR_POSITIONS                       RefMsgTypeEnum = 81
	RefMsgTypeEnum_REF_MSG_TYPE_REQUEST_FOR_POSITIONS_ACK                   RefMsgTypeEnum = 82
	RefMsgTypeEnum_REF_MSG_TYPE_RESEND_REQUEST                              RefMsgTypeEnum = 83
	RefMsgTypeEnum_REF_MSG_TYPE_RFQ_REQUEST                                 RefMsgTypeEnum = 84
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_DEFINITION                         RefMsgTypeEnum = 85
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_DEFINITION_REQUEST                 RefMsgTypeEnum = 86
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_DEFINITION_UPDATE_REPORT           RefMsgTypeEnum = 87
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_LIST                               RefMsgTypeEnum = 88
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_LIST_REQUEST                       RefMsgTypeEnum = 89
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_LIST_UPDATE_REPORT                 RefMsgTypeEnum = 90
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_STATUS                             RefMsgTypeEnum = 91
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_STATUS_REQUEST                     RefMsgTypeEnum = 92
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_TYPES                              RefMsgTypeEnum = 93
	RefMsgTypeEnum_REF_MSG_TYPE_SECURITY_TYPE_REQUEST                       RefMsgTypeEnum = 94
	RefMsgTypeEnum_REF_MSG_TYPE_SEQUENCE_RESET                              RefMsgTypeEnum = 95
	RefMsgTypeEnum_REF_MSG_TYPE_SETTLEMENT_INSTRUCTIONS                     RefMsgTypeEnum = 96
	RefMsgTypeEnum_REF_MSG_TYPE_SETTLEMENT_INSTRUCTION_REQUEST              RefMsgTypeEnum = 97
	RefMsgTypeEnum_REF_MSG_TYPE_SETTLEMENT_OBLIGATION_REPORT                RefMsgTypeEnum = 98
	RefMsgTypeEnum_REF_MSG_TYPE_STREAM_ASSIGNMENT_REPORT                    RefMsgTypeEnum = 99
	RefMsgTypeEnum_REF_MSG_TYPE_STREAM_ASSIGNMENT_REPORT_ACK                RefMsgTypeEnum = 100
	RefMsgTypeEnum_REF_MSG_TYPE_STREAM_ASSIGNMENT_REQUEST                   RefMsgTypeEnum = 101
	RefMsgTypeEnum_REF_MSG_TYPE_TEST_REQUEST                                RefMsgTypeEnum = 102
	RefMsgTypeEnum_REF_MSG_TYPE_TRADE_CAPTURE_REPORT                        RefMsgTypeEnum = 103
	RefMsgTypeEnum_REF_MSG_TYPE_TRADE_CAPTURE_REPORT_ACK                    RefMsgTypeEnum = 104
	RefMsgTypeEnum_REF_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST                RefMsgTypeEnum = 105
	RefMsgTypeEnum_REF_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST_ACK            RefMsgTypeEnum = 106
	RefMsgTypeEnum_REF_MSG_TYPE_TRADING_SESSION_LIST                        RefMsgTypeEnum = 107
	RefMsgTypeEnum_REF_MSG_TYPE_TRADING_SESSION_LIST_REQUEST                RefMsgTypeEnum = 108
	RefMsgTypeEnum_REF_MSG_TYPE_TRADING_SESSION_LIST_UPDATE_REPORT          RefMsgTypeEnum = 109
	RefMsgTypeEnum_REF_MSG_TYPE_TRADING_SESSION_STATUS                      RefMsgTypeEnum = 110
	RefMsgTypeEnum_REF_MSG_TYPE_TRADING_SESSION_STATUS_REQUEST              RefMsgTypeEnum = 111
	RefMsgTypeEnum_REF_MSG_TYPE_UNSPECIFIED                                 RefMsgTypeEnum = 112
	RefMsgTypeEnum_REF_MSG_TYPE_USER_NOTIFICATION                           RefMsgTypeEnum = 113
	RefMsgTypeEnum_REF_MSG_TYPE_USER_REQUEST                                RefMsgTypeEnum = 114
	RefMsgTypeEnum_REF_MSG_TYPE_USER_RESPONSE                               RefMsgTypeEnum = 115
	RefMsgTypeEnum_REF_MSG_TYPE_XMLNON_FIX                                  RefMsgTypeEnum = 116
)

var RefMsgTypeEnum_name = map[int32]string{
	0:   "REF_MSG_TYPE_ADJUSTED_POSITION_REPORT",
	1:   "REF_MSG_TYPE_ADVERTISEMENT",
	2:   "REF_MSG_TYPE_ALLOCATION_INSTRUCTION",
	3:   "REF_MSG_TYPE_ALLOCATION_INSTRUCTION_ACK",
	4:   "REF_MSG_TYPE_ALLOCATION_INSTRUCTION_ALERT",
	5:   "REF_MSG_TYPE_ALLOCATION_REPORT",
	6:   "REF_MSG_TYPE_ALLOCATION_REPORT_ACK",
	7:   "REF_MSG_TYPE_APPLICATION_MESSAGE_REPORT",
	8:   "REF_MSG_TYPE_APPLICATION_MESSAGE_REQUEST",
	9:   "REF_MSG_TYPE_APPLICATION_MESSAGE_REQUEST_ACK",
	10:  "REF_MSG_TYPE_ASSIGNMENT_REPORT",
	11:  "REF_MSG_TYPE_BID_REQUEST",
	12:  "REF_MSG_TYPE_BID_RESPONSE",
	13:  "REF_MSG_TYPE_BUSINESS_MESSAGE_REJECT",
	14:  "REF_MSG_TYPE_COLLATERAL_ASSIGNMENT",
	15:  "REF_MSG_TYPE_COLLATERAL_INQUIRY",
	16:  "REF_MSG_TYPE_COLLATERAL_INQUIRY_ACK",
	17:  "REF_MSG_TYPE_COLLATERAL_REPORT",
	18:  "REF_MSG_TYPE_COLLATERAL_REQUEST",
	19:  "REF_MSG_TYPE_COLLATERAL_RESPONSE",
	20:  "REF_MSG_TYPE_CONFIRMATION",
	21:  "REF_MSG_TYPE_CONFIRMATION_ACK",
	22:  "REF_MSG_TYPE_CONFIRMATION_REQUEST",
	23:  "REF_MSG_TYPE_CONTRARY_INTENTION_REPORT",
	24:  "REF_MSG_TYPE_CROSS_ORDER_CANCEL_REPLACE_REQUEST",
	25:  "REF_MSG_TYPE_CROSS_ORDER_CANCEL_REQUEST",
	26:  "REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST",
	27:  "REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST_REQUEST",
	28:  "REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST_UPDATE_REPORT",
	29:  "REF_MSG_TYPE_DONT_KNOW_TRADE",
	30:  "REF_MSG_TYPE_EMAIL",
	31:  "REF_MSG_TYPE_EXECUTION_ACKNOWLEDGEMENT",
	32:  "REF_MSG_TYPE_EXECUTION_REPORT",
	33:  "REF_MSG_TYPE_HEARTBEAT",
	34:  "REF_MSG_TYPE_IOI",
	35:  "REF_MSG_TYPE_LIST_CANCEL_REQUEST",
	36:  "REF_MSG_TYPE_LIST_EXECUTE",
	37:  "REF_MSG_TYPE_LIST_STATUS",
	38:  "REF_MSG_TYPE_LIST_STATUS_REQUEST",
	39:  "REF_MSG_TYPE_LIST_STRIKE_PRICE",
	40:  "REF_MSG_TYPE_LOGON",
	41:  "REF_MSG_TYPE_LOGOUT",
	42:  "REF_MSG_TYPE_MARKET_DATA_INCREMENTAL_REFRESH",
	43:  "REF_MSG_TYPE_MARKET_DATA_REQUEST",
	44:  "REF_MSG_TYPE_MARKET_DATA_REQUEST_REJECT",
	45:  "REF_MSG_TYPE_MARKET_DATA_SNAPSHOT_FULL_REFRESH",
	46:  "REF_MSG_TYPE_MARKET_DEFINITION",
	47:  "REF_MSG_TYPE_MARKET_DEFINITION_REQUEST",
	48:  "REF_MSG_TYPE_MARKET_DEFINITION_UPDATE_REPORT",
	49:  "REF_MSG_TYPE_MASS_QUOTE",
	50:  "REF_MSG_TYPE_MASS_QUOTE_ACKNOWLEDGEMENT",
	51:  "REF_MSG_TYPE_MULTILEG_ORDER_CANCEL_REPLACE",
	52:  "REF_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST",
	53:  "REF_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE",
	54:  "REF_MSG_TYPE_NEWS",
	55:  "REF_MSG_TYPE_NEW_ORDER_CROSS",
	56:  "REF_MSG_TYPE_NEW_ORDER_LIST",
	57:  "REF_MSG_TYPE_NEW_ORDER_MULTILEG",
	58:  "REF_MSG_TYPE_NEW_ORDER_SINGLE",
	59:  "REF_MSG_TYPE_ORDER_CANCEL_REJECT",
	60:  "REF_MSG_TYPE_ORDER_CANCEL_REPLACE_REQUEST",
	61:  "REF_MSG_TYPE_ORDER_CANCEL_REQUEST",
	62:  "REF_MSG_TYPE_ORDER_MASS_ACTION_REPORT",
	63:  "REF_MSG_TYPE_ORDER_MASS_ACTION_REQUEST",
	64:  "REF_MSG_TYPE_ORDER_MASS_CANCEL_REPORT",
	65:  "REF_MSG_TYPE_ORDER_MASS_CANCEL_REQUEST",
	66:  "REF_MSG_TYPE_ORDER_MASS_STATUS_REQUEST",
	67:  "REF_MSG_TYPE_ORDER_STATUS_REQUEST",
	68:  "REF_MSG_TYPE_POSITION_MAINTENANCE_REPORT",
	69:  "REF_MSG_TYPE_POSITION_MAINTENANCE_REQUEST",
	70:  "REF_MSG_TYPE_POSITION_REPORT",
	71:  "REF_MSG_TYPE_QUOTE",
	72:  "REF_MSG_TYPE_QUOTE_CANCEL",
	73:  "REF_MSG_TYPE_QUOTE_REQUEST",
	74:  "REF_MSG_TYPE_QUOTE_REQUEST_REJECT",
	75:  "REF_MSG_TYPE_QUOTE_RESPONSE",
	76:  "REF_MSG_TYPE_QUOTE_STATUS_REPORT",
	77:  "REF_MSG_TYPE_QUOTE_STATUS_REQUEST",
	78:  "REF_MSG_TYPE_REGISTRATION_INSTRUCTIONS",
	79:  "REF_MSG_TYPE_REGISTRATION_INSTRUCTIONS_RESPONSE",
	80:  "REF_MSG_TYPE_REJECT",
	81:  "REF_MSG_TYPE_REQUEST_FOR_POSITIONS",
	82:  "REF_MSG_TYPE_REQUEST_FOR_POSITIONS_ACK",
	83:  "REF_MSG_TYPE_RESEND_REQUEST",
	84:  "REF_MSG_TYPE_RFQ_REQUEST",
	85:  "REF_MSG_TYPE_SECURITY_DEFINITION",
	86:  "REF_MSG_TYPE_SECURITY_DEFINITION_REQUEST",
	87:  "REF_MSG_TYPE_SECURITY_DEFINITION_UPDATE_REPORT",
	88:  "REF_MSG_TYPE_SECURITY_LIST",
	89:  "REF_MSG_TYPE_SECURITY_LIST_REQUEST",
	90:  "REF_MSG_TYPE_SECURITY_LIST_UPDATE_REPORT",
	91:  "REF_MSG_TYPE_SECURITY_STATUS",
	92:  "REF_MSG_TYPE_SECURITY_STATUS_REQUEST",
	93:  "REF_MSG_TYPE_SECURITY_TYPES",
	94:  "REF_MSG_TYPE_SECURITY_TYPE_REQUEST",
	95:  "REF_MSG_TYPE_SEQUENCE_RESET",
	96:  "REF_MSG_TYPE_SETTLEMENT_INSTRUCTIONS",
	97:  "REF_MSG_TYPE_SETTLEMENT_INSTRUCTION_REQUEST",
	98:  "REF_MSG_TYPE_SETTLEMENT_OBLIGATION_REPORT",
	99:  "REF_MSG_TYPE_STREAM_ASSIGNMENT_REPORT",
	100: "REF_MSG_TYPE_STREAM_ASSIGNMENT_REPORT_ACK",
	101: "REF_MSG_TYPE_STREAM_ASSIGNMENT_REQUEST",
	102: "REF_MSG_TYPE_TEST_REQUEST",
	103: "REF_MSG_TYPE_TRADE_CAPTURE_REPORT",
	104: "REF_MSG_TYPE_TRADE_CAPTURE_REPORT_ACK",
	105: "REF_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST",
	106: "REF_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST_ACK",
	107: "REF_MSG_TYPE_TRADING_SESSION_LIST",
	108: "REF_MSG_TYPE_TRADING_SESSION_LIST_REQUEST",
	109: "REF_MSG_TYPE_TRADING_SESSION_LIST_UPDATE_REPORT",
	110: "REF_MSG_TYPE_TRADING_SESSION_STATUS",
	111: "REF_MSG_TYPE_TRADING_SESSION_STATUS_REQUEST",
	112: "REF_MSG_TYPE_UNSPECIFIED",
	113: "REF_MSG_TYPE_USER_NOTIFICATION",
	114: "REF_MSG_TYPE_USER_REQUEST",
	115: "REF_MSG_TYPE_USER_RESPONSE",
	116: "REF_MSG_TYPE_XMLNON_FIX",
}

var RefMsgTypeEnum_value = map[string]int32{
	"REF_MSG_TYPE_ADJUSTED_POSITION_REPORT":                    0,
	"REF_MSG_TYPE_ADVERTISEMENT":                               1,
	"REF_MSG_TYPE_ALLOCATION_INSTRUCTION":                      2,
	"REF_MSG_TYPE_ALLOCATION_INSTRUCTION_ACK":                  3,
	"REF_MSG_TYPE_ALLOCATION_INSTRUCTION_ALERT":                4,
	"REF_MSG_TYPE_ALLOCATION_REPORT":                           5,
	"REF_MSG_TYPE_ALLOCATION_REPORT_ACK":                       6,
	"REF_MSG_TYPE_APPLICATION_MESSAGE_REPORT":                  7,
	"REF_MSG_TYPE_APPLICATION_MESSAGE_REQUEST":                 8,
	"REF_MSG_TYPE_APPLICATION_MESSAGE_REQUEST_ACK":             9,
	"REF_MSG_TYPE_ASSIGNMENT_REPORT":                           10,
	"REF_MSG_TYPE_BID_REQUEST":                                 11,
	"REF_MSG_TYPE_BID_RESPONSE":                                12,
	"REF_MSG_TYPE_BUSINESS_MESSAGE_REJECT":                     13,
	"REF_MSG_TYPE_COLLATERAL_ASSIGNMENT":                       14,
	"REF_MSG_TYPE_COLLATERAL_INQUIRY":                          15,
	"REF_MSG_TYPE_COLLATERAL_INQUIRY_ACK":                      16,
	"REF_MSG_TYPE_COLLATERAL_REPORT":                           17,
	"REF_MSG_TYPE_COLLATERAL_REQUEST":                          18,
	"REF_MSG_TYPE_COLLATERAL_RESPONSE":                         19,
	"REF_MSG_TYPE_CONFIRMATION":                                20,
	"REF_MSG_TYPE_CONFIRMATION_ACK":                            21,
	"REF_MSG_TYPE_CONFIRMATION_REQUEST":                        22,
	"REF_MSG_TYPE_CONTRARY_INTENTION_REPORT":                   23,
	"REF_MSG_TYPE_CROSS_ORDER_CANCEL_REPLACE_REQUEST":          24,
	"REF_MSG_TYPE_CROSS_ORDER_CANCEL_REQUEST":                  25,
	"REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST":                    26,
	"REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST_REQUEST":            27,
	"REF_MSG_TYPE_DERIVATIVE_SECURITY_LIST_UPDATE_REPORT":      28,
	"REF_MSG_TYPE_DONT_KNOW_TRADE":                             29,
	"REF_MSG_TYPE_EMAIL":                                       30,
	"REF_MSG_TYPE_EXECUTION_ACKNOWLEDGEMENT":                   31,
	"REF_MSG_TYPE_EXECUTION_REPORT":                            32,
	"REF_MSG_TYPE_HEARTBEAT":                                   33,
	"REF_MSG_TYPE_IOI":                                         34,
	"REF_MSG_TYPE_LIST_CANCEL_REQUEST":                         35,
	"REF_MSG_TYPE_LIST_EXECUTE":                                36,
	"REF_MSG_TYPE_LIST_STATUS":                                 37,
	"REF_MSG_TYPE_LIST_STATUS_REQUEST":                         38,
	"REF_MSG_TYPE_LIST_STRIKE_PRICE":                           39,
	"REF_MSG_TYPE_LOGON":                                       40,
	"REF_MSG_TYPE_LOGOUT":                                      41,
	"REF_MSG_TYPE_MARKET_DATA_INCREMENTAL_REFRESH":             42,
	"REF_MSG_TYPE_MARKET_DATA_REQUEST":                         43,
	"REF_MSG_TYPE_MARKET_DATA_REQUEST_REJECT":                  44,
	"REF_MSG_TYPE_MARKET_DATA_SNAPSHOT_FULL_REFRESH":           45,
	"REF_MSG_TYPE_MARKET_DEFINITION":                           46,
	"REF_MSG_TYPE_MARKET_DEFINITION_REQUEST":                   47,
	"REF_MSG_TYPE_MARKET_DEFINITION_UPDATE_REPORT":             48,
	"REF_MSG_TYPE_MASS_QUOTE":                                  49,
	"REF_MSG_TYPE_MASS_QUOTE_ACKNOWLEDGEMENT":                  50,
	"REF_MSG_TYPE_MULTILEG_ORDER_CANCEL_REPLACE":               51,
	"REF_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST":  52,
	"REF_MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE": 53,
	"REF_MSG_TYPE_NEWS":                                        54,
	"REF_MSG_TYPE_NEW_ORDER_CROSS":                             55,
	"REF_MSG_TYPE_NEW_ORDER_LIST":                              56,
	"REF_MSG_TYPE_NEW_ORDER_MULTILEG":                          57,
	"REF_MSG_TYPE_NEW_ORDER_SINGLE":                            58,
	"REF_MSG_TYPE_ORDER_CANCEL_REJECT":                         59,
	"REF_MSG_TYPE_ORDER_CANCEL_REPLACE_REQUEST":                60,
	"REF_MSG_TYPE_ORDER_CANCEL_REQUEST":                        61,
	"REF_MSG_TYPE_ORDER_MASS_ACTION_REPORT":                    62,
	"REF_MSG_TYPE_ORDER_MASS_ACTION_REQUEST":                   63,
	"REF_MSG_TYPE_ORDER_MASS_CANCEL_REPORT":                    64,
	"REF_MSG_TYPE_ORDER_MASS_CANCEL_REQUEST":                   65,
	"REF_MSG_TYPE_ORDER_MASS_STATUS_REQUEST":                   66,
	"REF_MSG_TYPE_ORDER_STATUS_REQUEST":                        67,
	"REF_MSG_TYPE_POSITION_MAINTENANCE_REPORT":                 68,
	"REF_MSG_TYPE_POSITION_MAINTENANCE_REQUEST":                69,
	"REF_MSG_TYPE_POSITION_REPORT":                             70,
	"REF_MSG_TYPE_QUOTE":                                       71,
	"REF_MSG_TYPE_QUOTE_CANCEL":                                72,
	"REF_MSG_TYPE_QUOTE_REQUEST":                               73,
	"REF_MSG_TYPE_QUOTE_REQUEST_REJECT":                        74,
	"REF_MSG_TYPE_QUOTE_RESPONSE":                              75,
	"REF_MSG_TYPE_QUOTE_STATUS_REPORT":                         76,
	"REF_MSG_TYPE_QUOTE_STATUS_REQUEST":                        77,
	"REF_MSG_TYPE_REGISTRATION_INSTRUCTIONS":                   78,
	"REF_MSG_TYPE_REGISTRATION_INSTRUCTIONS_RESPONSE":          79,
	"REF_MSG_TYPE_REJECT":                                      80,
	"REF_MSG_TYPE_REQUEST_FOR_POSITIONS":                       81,
	"REF_MSG_TYPE_REQUEST_FOR_POSITIONS_ACK":                   82,
	"REF_MSG_TYPE_RESEND_REQUEST":                              83,
	"REF_MSG_TYPE_RFQ_REQUEST":                                 84,
	"REF_MSG_TYPE_SECURITY_DEFINITION":                         85,
	"REF_MSG_TYPE_SECURITY_DEFINITION_REQUEST":                 86,
	"REF_MSG_TYPE_SECURITY_DEFINITION_UPDATE_REPORT":           87,
	"REF_MSG_TYPE_SECURITY_LIST":                               88,
	"REF_MSG_TYPE_SECURITY_LIST_REQUEST":                       89,
	"REF_MSG_TYPE_SECURITY_LIST_UPDATE_REPORT":                 90,
	"REF_MSG_TYPE_SECURITY_STATUS":                             91,
	"REF_MSG_TYPE_SECURITY_STATUS_REQUEST":                     92,
	"REF_MSG_TYPE_SECURITY_TYPES":                              93,
	"REF_MSG_TYPE_SECURITY_TYPE_REQUEST":                       94,
	"REF_MSG_TYPE_SEQUENCE_RESET":                              95,
	"REF_MSG_TYPE_SETTLEMENT_INSTRUCTIONS":                     96,
	"REF_MSG_TYPE_SETTLEMENT_INSTRUCTION_REQUEST":              97,
	"REF_MSG_TYPE_SETTLEMENT_OBLIGATION_REPORT":                98,
	"REF_MSG_TYPE_STREAM_ASSIGNMENT_REPORT":                    99,
	"REF_MSG_TYPE_STREAM_ASSIGNMENT_REPORT_ACK":                100,
	"REF_MSG_TYPE_STREAM_ASSIGNMENT_REQUEST":                   101,
	"REF_MSG_TYPE_TEST_REQUEST":                                102,
	"REF_MSG_TYPE_TRADE_CAPTURE_REPORT":                        103,
	"REF_MSG_TYPE_TRADE_CAPTURE_REPORT_ACK":                    104,
	"REF_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST":                105,
	"REF_MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST_ACK":            106,
	"REF_MSG_TYPE_TRADING_SESSION_LIST":                        107,
	"REF_MSG_TYPE_TRADING_SESSION_LIST_REQUEST":                108,
	"REF_MSG_TYPE_TRADING_SESSION_LIST_UPDATE_REPORT":          109,
	"REF_MSG_TYPE_TRADING_SESSION_STATUS":                      110,
	"REF_MSG_TYPE_TRADING_SESSION_STATUS_REQUEST":              111,
	"REF_MSG_TYPE_UNSPECIFIED":                                 112,
	"REF_MSG_TYPE_USER_NOTIFICATION":                           113,
	"REF_MSG_TYPE_USER_REQUEST":                                114,
	"REF_MSG_TYPE_USER_RESPONSE":                               115,
	"REF_MSG_TYPE_XMLNON_FIX":                                  116,
}

func (x RefMsgTypeEnum) String() string {
	return proto.EnumName(RefMsgTypeEnum_name, int32(x))
}

func (RefMsgTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{2}
}

type RefApplVerIDEnum int32

const (
	RefApplVerIDEnum_REF_APPL_VER_ID_UNSPECIFIED RefApplVerIDEnum = 0
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX27       RefApplVerIDEnum = 1
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX30       RefApplVerIDEnum = 2
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX40       RefApplVerIDEnum = 3
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX41       RefApplVerIDEnum = 4
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX42       RefApplVerIDEnum = 5
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX43       RefApplVerIDEnum = 6
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX44       RefApplVerIDEnum = 7
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX50       RefApplVerIDEnum = 8
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX50SP1    RefApplVerIDEnum = 9
	RefApplVerIDEnum_REF_APPL_VER_ID_FIX50SP2    RefApplVerIDEnum = 10
)

var RefApplVerIDEnum_name = map[int32]string{
	0:  "REF_APPL_VER_ID_UNSPECIFIED",
	1:  "REF_APPL_VER_ID_FIX27",
	2:  "REF_APPL_VER_ID_FIX30",
	3:  "REF_APPL_VER_ID_FIX40",
	4:  "REF_APPL_VER_ID_FIX41",
	5:  "REF_APPL_VER_ID_FIX42",
	6:  "REF_APPL_VER_ID_FIX43",
	7:  "REF_APPL_VER_ID_FIX44",
	8:  "REF_APPL_VER_ID_FIX50",
	9:  "REF_APPL_VER_ID_FIX50SP1",
	10: "REF_APPL_VER_ID_FIX50SP2",
}

var RefApplVerIDEnum_value = map[string]int32{
	"REF_APPL_VER_ID_UNSPECIFIED": 0,
	"REF_APPL_VER_ID_FIX27":       1,
	"REF_APPL_VER_ID_FIX30":       2,
	"REF_APPL_VER_ID_FIX40":       3,
	"REF_APPL_VER_ID_FIX41":       4,
	"REF_APPL_VER_ID_FIX42":       5,
	"REF_APPL_VER_ID_FIX43":       6,
	"REF_APPL_VER_ID_FIX44":       7,
	"REF_APPL_VER_ID_FIX50":       8,
	"REF_APPL_VER_ID_FIX50SP1":    9,
	"REF_APPL_VER_ID_FIX50SP2":    10,
}

func (x RefApplVerIDEnum) String() string {
	return proto.EnumName(RefApplVerIDEnum_name, int32(x))
}

func (RefApplVerIDEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{3}
}

type SessionRejectReasonEnum int32

const (
	SessionRejectReasonEnum_SESSION_REJECT_REASON_UNSPECIFIED                                      SessionRejectReasonEnum = 0
	SessionRejectReasonEnum_SESSION_REJECT_REASON_COMP_ID_PROBLEM                                  SessionRejectReasonEnum = 1
	SessionRejectReasonEnum_SESSION_REJECT_REASON_DECRYPTION_PROBLEM                               SessionRejectReasonEnum = 2
	SessionRejectReasonEnum_SESSION_REJECT_REASON_INCORRECT_DATA_FORMAT_FOR_VALUE                  SessionRejectReasonEnum = 3
	SessionRejectReasonEnum_SESSION_REJECT_REASON_INVALID_MSG_TYPE                                 SessionRejectReasonEnum = 4
	SessionRejectReasonEnum_SESSION_REJECT_REASON_INVALID_TAG_NUMBER                               SessionRejectReasonEnum = 5
	SessionRejectReasonEnum_SESSION_REJECT_REASON_REQUIRED_TAG_MISSING                             SessionRejectReasonEnum = 6
	SessionRejectReasonEnum_SESSION_REJECT_REASON_SENDING_TIME_ACCURACY_PROBLEM                    SessionRejectReasonEnum = 7
	SessionRejectReasonEnum_SESSION_REJECT_REASON_SIGNATURE_PROBLEM                                SessionRejectReasonEnum = 8
	SessionRejectReasonEnum_SESSION_REJECT_REASON_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE            SessionRejectReasonEnum = 9
	SessionRejectReasonEnum_SESSION_REJECT_REASON_TAG_SPECIFIED_WITHOUT_AVALUE                     SessionRejectReasonEnum = 10
	SessionRejectReasonEnum_SESSION_REJECT_REASON_UNDEFINED_TAG                                    SessionRejectReasonEnum = 11
	SessionRejectReasonEnum_SESSION_REJECT_REASON_VALUE_IS_INCORRECT                               SessionRejectReasonEnum = 12
	SessionRejectReasonEnum_SESSION_REJECT_REASON_INCORRECT_NUM_IN_GROUP_COUNT_FOR_REPEATING_GROUP SessionRejectReasonEnum = 13
	SessionRejectReasonEnum_SESSION_REJECT_REASON_NON                                              SessionRejectReasonEnum = 14
	SessionRejectReasonEnum_SESSION_REJECT_REASON_REPEATING_GROUP_FIELDS_OUT_OF_ORDER              SessionRejectReasonEnum = 15
	SessionRejectReasonEnum_SESSION_REJECT_REASON_TAG_APPEARS_MORE_THAN_ONCE                       SessionRejectReasonEnum = 16
	SessionRejectReasonEnum_SESSION_REJECT_REASON_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER              SessionRejectReasonEnum = 17
	SessionRejectReasonEnum_SESSION_REJECT_REASON_XML_VALIDATION_ERROR                             SessionRejectReasonEnum = 18
	SessionRejectReasonEnum_SESSION_REJECT_REASON_OTHER                                            SessionRejectReasonEnum = 19
	SessionRejectReasonEnum_SESSION_REJECT_REASON_INVALID                                          SessionRejectReasonEnum = 20
)

var SessionRejectReasonEnum_name = map[int32]string{
	0:  "SESSION_REJECT_REASON_UNSPECIFIED",
	1:  "SESSION_REJECT_REASON_COMP_ID_PROBLEM",
	2:  "SESSION_REJECT_REASON_DECRYPTION_PROBLEM",
	3:  "SESSION_REJECT_REASON_INCORRECT_DATA_FORMAT_FOR_VALUE",
	4:  "SESSION_REJECT_REASON_INVALID_MSG_TYPE",
	5:  "SESSION_REJECT_REASON_INVALID_TAG_NUMBER",
	6:  "SESSION_REJECT_REASON_REQUIRED_TAG_MISSING",
	7:  "SESSION_REJECT_REASON_SENDING_TIME_ACCURACY_PROBLEM",
	8:  "SESSION_REJECT_REASON_SIGNATURE_PROBLEM",
	9:  "SESSION_REJECT_REASON_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE",
	10: "SESSION_REJECT_REASON_TAG_SPECIFIED_WITHOUT_AVALUE",
	11: "SESSION_REJECT_REASON_UNDEFINED_TAG",
	12: "SESSION_REJECT_REASON_VALUE_IS_INCORRECT",
	13: "SESSION_REJECT_REASON_INCORRECT_NUM_IN_GROUP_COUNT_FOR_REPEATING_GROUP",
	14: "SESSION_REJECT_REASON_NON",
	15: "SESSION_REJECT_REASON_REPEATING_GROUP_FIELDS_OUT_OF_ORDER",
	16: "SESSION_REJECT_REASON_TAG_APPEARS_MORE_THAN_ONCE",
	17: "SESSION_REJECT_REASON_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER",
	18: "SESSION_REJECT_REASON_XML_VALIDATION_ERROR",
	19: "SESSION_REJECT_REASON_OTHER",
	20: "SESSION_REJECT_REASON_INVALID",
}

var SessionRejectReasonEnum_value = map[string]int32{
	"SESSION_REJECT_REASON_UNSPECIFIED":                                      0,
	"SESSION_REJECT_REASON_COMP_ID_PROBLEM":                                  1,
	"SESSION_REJECT_REASON_DECRYPTION_PROBLEM":                               2,
	"SESSION_REJECT_REASON_INCORRECT_DATA_FORMAT_FOR_VALUE":                  3,
	"SESSION_REJECT_REASON_INVALID_MSG_TYPE":                                 4,
	"SESSION_REJECT_REASON_INVALID_TAG_NUMBER":                               5,
	"SESSION_REJECT_REASON_REQUIRED_TAG_MISSING":                             6,
	"SESSION_REJECT_REASON_SENDING_TIME_ACCURACY_PROBLEM":                    7,
	"SESSION_REJECT_REASON_SIGNATURE_PROBLEM":                                8,
	"SESSION_REJECT_REASON_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE":            9,
	"SESSION_REJECT_REASON_TAG_SPECIFIED_WITHOUT_AVALUE":                     10,
	"SESSION_REJECT_REASON_UNDEFINED_TAG":                                    11,
	"SESSION_REJECT_REASON_VALUE_IS_INCORRECT":                               12,
	"SESSION_REJECT_REASON_INCORRECT_NUM_IN_GROUP_COUNT_FOR_REPEATING_GROUP": 13,
	"SESSION_REJECT_REASON_NON":                                              14,
	"SESSION_REJECT_REASON_REPEATING_GROUP_FIELDS_OUT_OF_ORDER":              15,
	"SESSION_REJECT_REASON_TAG_APPEARS_MORE_THAN_ONCE":                       16,
	"SESSION_REJECT_REASON_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER":              17,
	"SESSION_REJECT_REASON_XML_VALIDATION_ERROR":                             18,
	"SESSION_REJECT_REASON_OTHER":                                            19,
	"SESSION_REJECT_REASON_INVALID":                                          20,
}

func (x SessionRejectReasonEnum) String() string {
	return proto.EnumName(SessionRejectReasonEnum_name, int32(x))
}

func (SessionRejectReasonEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{4}
}

type SessionStatusEnum int32

const (
	SessionStatusEnum_SESSION_STATUS_UNSPECIFIED                                      SessionStatusEnum = 0
	SessionStatusEnum_SESSION_STATUS_ACCOUNT_LOCKED                                   SessionStatusEnum = 1
	SessionStatusEnum_SESSION_STATUS_INVALID_USERNAME_OR_PASSWORD                     SessionStatusEnum = 2
	SessionStatusEnum_SESSION_STATUS_LOGONS_ARE_NOT_ALLOWED_AT_THIS_TIME              SessionStatusEnum = 3
	SessionStatusEnum_SESSION_STATUS_NEW_SESSION_PASSWORD_DOES_NOT_COMPLY_WITH_POLICY SessionStatusEnum = 4
	SessionStatusEnum_SESSION_STATUS_PASSWORD_EXPIRED                                 SessionStatusEnum = 5
	SessionStatusEnum_SESSION_STATUS_SESSION_ACTIVE                                   SessionStatusEnum = 6
	SessionStatusEnum_SESSION_STATUS_SESSION_LOGOUT_COMPLETE                          SessionStatusEnum = 7
	SessionStatusEnum_SESSION_STATUS_SESSION_PASSWORD_CHANGED                         SessionStatusEnum = 8
	SessionStatusEnum_SESSION_STATUS_SESSION_PASSWORD_DUE_TO_EXPIRE                   SessionStatusEnum = 9
)

var SessionStatusEnum_name = map[int32]string{
	0: "SESSION_STATUS_UNSPECIFIED",
	1: "SESSION_STATUS_ACCOUNT_LOCKED",
	2: "SESSION_STATUS_INVALID_USERNAME_OR_PASSWORD",
	3: "SESSION_STATUS_LOGONS_ARE_NOT_ALLOWED_AT_THIS_TIME",
	4: "SESSION_STATUS_NEW_SESSION_PASSWORD_DOES_NOT_COMPLY_WITH_POLICY",
	5: "SESSION_STATUS_PASSWORD_EXPIRED",
	6: "SESSION_STATUS_SESSION_ACTIVE",
	7: "SESSION_STATUS_SESSION_LOGOUT_COMPLETE",
	8: "SESSION_STATUS_SESSION_PASSWORD_CHANGED",
	9: "SESSION_STATUS_SESSION_PASSWORD_DUE_TO_EXPIRE",
}

var SessionStatusEnum_value = map[string]int32{
	"SESSION_STATUS_UNSPECIFIED":                                      0,
	"SESSION_STATUS_ACCOUNT_LOCKED":                                   1,
	"SESSION_STATUS_INVALID_USERNAME_OR_PASSWORD":                     2,
	"SESSION_STATUS_LOGONS_ARE_NOT_ALLOWED_AT_THIS_TIME":              3,
	"SESSION_STATUS_NEW_SESSION_PASSWORD_DOES_NOT_COMPLY_WITH_POLICY": 4,
	"SESSION_STATUS_PASSWORD_EXPIRED":                                 5,
	"SESSION_STATUS_SESSION_ACTIVE":                                   6,
	"SESSION_STATUS_SESSION_LOGOUT_COMPLETE":                          7,
	"SESSION_STATUS_SESSION_PASSWORD_CHANGED":                         8,
	"SESSION_STATUS_SESSION_PASSWORD_DUE_TO_EXPIRE":                   9,
}

func (x SessionStatusEnum) String() string {
	return proto.EnumName(SessionStatusEnum_name, int32(x))
}

func (SessionStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{5}
}

type EncryptMethodEnum int32

const (
	EncryptMethodEnum_ENCRYPT_METHOD_UNSPECIFIED EncryptMethodEnum = 0
	EncryptMethodEnum_ENCRYPT_METHOD_DES         EncryptMethodEnum = 1
	EncryptMethodEnum_ENCRYPT_METHOD_NONE        EncryptMethodEnum = 2
	EncryptMethodEnum_ENCRYPT_METHOD_PKCS        EncryptMethodEnum = 3
	EncryptMethodEnum_ENCRYPT_METHOD_PKCSDES     EncryptMethodEnum = 4
	EncryptMethodEnum_ENCRYPT_METHOD_PGPDES      EncryptMethodEnum = 5
	EncryptMethodEnum_ENCRYPT_METHOD_PEM         EncryptMethodEnum = 6
	EncryptMethodEnum_ENCRYPT_METHOD_PGPDESMD5   EncryptMethodEnum = 7
)

var EncryptMethodEnum_name = map[int32]string{
	0: "ENCRYPT_METHOD_UNSPECIFIED",
	1: "ENCRYPT_METHOD_DES",
	2: "ENCRYPT_METHOD_NONE",
	3: "ENCRYPT_METHOD_PKCS",
	4: "ENCRYPT_METHOD_PKCSDES",
	5: "ENCRYPT_METHOD_PGPDES",
	6: "ENCRYPT_METHOD_PEM",
	7: "ENCRYPT_METHOD_PGPDESMD5",
}

var EncryptMethodEnum_value = map[string]int32{
	"ENCRYPT_METHOD_UNSPECIFIED": 0,
	"ENCRYPT_METHOD_DES":         1,
	"ENCRYPT_METHOD_NONE":        2,
	"ENCRYPT_METHOD_PKCS":        3,
	"ENCRYPT_METHOD_PKCSDES":     4,
	"ENCRYPT_METHOD_PGPDES":      5,
	"ENCRYPT_METHOD_PEM":         6,
	"ENCRYPT_METHOD_PGPDESMD5":   7,
}

func (x EncryptMethodEnum) String() string {
	return proto.EnumName(EncryptMethodEnum_name, int32(x))
}

func (EncryptMethodEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{6}
}

type DefaultApplVerIDEnum int32

const (
	DefaultApplVerIDEnum_DEFAULT_APPL_VER_ID_UNSPECIFIED DefaultApplVerIDEnum = 0
	DefaultApplVerIDEnum_DEFAULT_APPL_VER_ID_FIX27       DefaultApplVerIDEnum = 1
	DefaultApplVerIDEnum_DEFAULT_APPL_VER_ID_FIX30       DefaultApplVerIDEnum = 2
	DefaultApplVerIDEnum_DEFAULT_APPL_VER_ID_FIX40       DefaultApplVerIDEnum = 3
	DefaultApplVerIDEnum_DEFAULT_APPL_VER_ID_FIX41       DefaultApplVerIDEnum = 4
	DefaultApplVerIDEnum_DEFAULT_APPL_VER_ID_FIX42       DefaultApplVerIDEnum = 5
	DefaultApplVerIDEnum_DEFAULT_APPL_VER_ID_FIX43       DefaultApplVerIDEnum = 6
	DefaultApplVerIDEnum_DEFAULT_APPL_VER_ID_FIX44       DefaultApplVerIDEnum = 7
	DefaultApplVerIDEnum_DEFAULT_APPL_VER_ID_FIX50       DefaultApplVerIDEnum = 8
	DefaultApplVerIDEnum_DEFAULT_APPL_VER_ID_FIX50SP1    DefaultApplVerIDEnum = 9
	DefaultApplVerIDEnum_DEFAULT_APPL_VER_ID_FIX50SP2    DefaultApplVerIDEnum = 10
)

var DefaultApplVerIDEnum_name = map[int32]string{
	0:  "DEFAULT_APPL_VER_ID_UNSPECIFIED",
	1:  "DEFAULT_APPL_VER_ID_FIX27",
	2:  "DEFAULT_APPL_VER_ID_FIX30",
	3:  "DEFAULT_APPL_VER_ID_FIX40",
	4:  "DEFAULT_APPL_VER_ID_FIX41",
	5:  "DEFAULT_APPL_VER_ID_FIX42",
	6:  "DEFAULT_APPL_VER_ID_FIX43",
	7:  "DEFAULT_APPL_VER_ID_FIX44",
	8:  "DEFAULT_APPL_VER_ID_FIX50",
	9:  "DEFAULT_APPL_VER_ID_FIX50SP1",
	10: "DEFAULT_APPL_VER_ID_FIX50SP2",
}

var DefaultApplVerIDEnum_value = map[string]int32{
	"DEFAULT_APPL_VER_ID_UNSPECIFIED": 0,
	"DEFAULT_APPL_VER_ID_FIX27":       1,
	"DEFAULT_APPL_VER_ID_FIX30":       2,
	"DEFAULT_APPL_VER_ID_FIX40":       3,
	"DEFAULT_APPL_VER_ID_FIX41":       4,
	"DEFAULT_APPL_VER_ID_FIX42":       5,
	"DEFAULT_APPL_VER_ID_FIX43":       6,
	"DEFAULT_APPL_VER_ID_FIX44":       7,
	"DEFAULT_APPL_VER_ID_FIX50":       8,
	"DEFAULT_APPL_VER_ID_FIX50SP1":    9,
	"DEFAULT_APPL_VER_ID_FIX50SP2":    10,
}

func (x DefaultApplVerIDEnum) String() string {
	return proto.EnumName(DefaultApplVerIDEnum_name, int32(x))
}

func (DefaultApplVerIDEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{7}
}

type StandardHeader struct {
	BeginString            string        `protobuf:"bytes,1,opt,name=begin_string,json=beginString,proto3" json:"begin_string,omitempty"`
	BodyLength             int64         `protobuf:"fixed64,2,opt,name=body_length,json=bodyLength,proto3" json:"body_length,omitempty"`
	DeliverToCompId        string        `protobuf:"bytes,3,opt,name=deliver_to_comp_id,json=deliverToCompId,proto3" json:"deliver_to_comp_id,omitempty"`
	DeliverToSubId         string        `protobuf:"bytes,4,opt,name=deliver_to_sub_id,json=deliverToSubId,proto3" json:"deliver_to_sub_id,omitempty"`
	MsgSeqNum              int64         `protobuf:"fixed64,5,opt,name=msg_seq_num,json=msgSeqNum,proto3" json:"msg_seq_num,omitempty"`
	MsgType                MsgTypeEnum   `protobuf:"varint,6,opt,name=msg_type,json=msgType,proto3,enum=Session.MsgTypeEnum" json:"msg_type,omitempty"`
	OnBehalfOfCompId       string        `protobuf:"bytes,7,opt,name=on_behalf_of_comp_id,json=onBehalfOfCompId,proto3" json:"on_behalf_of_comp_id,omitempty"`
	OnBehalfOfSubId        string        `protobuf:"bytes,8,opt,name=on_behalf_of_sub_id,json=onBehalfOfSubId,proto3" json:"on_behalf_of_sub_id,omitempty"`
	OrigSendingTime        *Timestamp    `protobuf:"bytes,9,opt,name=orig_sending_time,json=origSendingTime,proto3" json:"orig_sending_time,omitempty"`
	PossDupFlag            bool          `protobuf:"varint,10,opt,name=poss_dup_flag,json=possDupFlag,proto3" json:"poss_dup_flag,omitempty"`
	PossResend             bool          `protobuf:"varint,11,opt,name=poss_resend,json=possResend,proto3" json:"poss_resend,omitempty"`
	SecureData             string        `protobuf:"bytes,12,opt,name=secure_data,json=secureData,proto3" json:"secure_data,omitempty"`
	SecureDataLen          int64         `protobuf:"fixed64,13,opt,name=secure_data_len,json=secureDataLen,proto3" json:"secure_data_len,omitempty"`
	SenderCompId           string        `protobuf:"bytes,14,opt,name=sender_comp_id,json=senderCompId,proto3" json:"sender_comp_id,omitempty"`
	SenderSubId            string        `protobuf:"bytes,15,opt,name=sender_sub_id,json=senderSubId,proto3" json:"sender_sub_id,omitempty"`
	SendingTime            *Timestamp    `protobuf:"bytes,16,opt,name=sending_time,json=sendingTime,proto3" json:"sending_time,omitempty"`
	TargetCompId           string        `protobuf:"bytes,17,opt,name=target_comp_id,json=targetCompId,proto3" json:"target_comp_id,omitempty"`
	TargetSubId            string        `protobuf:"bytes,18,opt,name=target_sub_id,json=targetSubId,proto3" json:"target_sub_id,omitempty"`
	DeliverToLocationId    string        `protobuf:"bytes,19,opt,name=deliver_to_location_id,json=deliverToLocationId,proto3" json:"deliver_to_location_id,omitempty"`
	OnBehalfOfLocationId   string        `protobuf:"bytes,20,opt,name=on_behalf_of_location_id,json=onBehalfOfLocationId,proto3" json:"on_behalf_of_location_id,omitempty"`
	SenderLocationId       string        `protobuf:"bytes,21,opt,name=sender_location_id,json=senderLocationId,proto3" json:"sender_location_id,omitempty"`
	TargetLocationId       string        `protobuf:"bytes,22,opt,name=target_location_id,json=targetLocationId,proto3" json:"target_location_id,omitempty"`
	LastMsgSeqNumProcessed int64         `protobuf:"fixed64,23,opt,name=last_msg_seq_num_processed,json=lastMsgSeqNumProcessed,proto3" json:"last_msg_seq_num_processed,omitempty"`
	MessageEncoding        string        `protobuf:"bytes,24,opt,name=message_encoding,json=messageEncoding,proto3" json:"message_encoding,omitempty"`
	XmlData                string        `protobuf:"bytes,25,opt,name=xml_data,json=xmlData,proto3" json:"xml_data,omitempty"`
	XmlDataLen             int64         `protobuf:"fixed64,26,opt,name=xml_data_len,json=xmlDataLen,proto3" json:"xml_data_len,omitempty"`
	ApplVerId              ApplVerIDEnum `protobuf:"varint,27,opt,name=appl_ver_id,json=applVerId,proto3,enum=Session.ApplVerIDEnum" json:"appl_ver_id,omitempty"`
	CstmApplVerId          string        `protobuf:"bytes,28,opt,name=cstm_appl_ver_id,json=cstmApplVerId,proto3" json:"cstm_appl_ver_id,omitempty"`
	HopGrp                 []*HopGrp     `protobuf:"bytes,29,rep,name=hop_grp,json=hopGrp,proto3" json:"hop_grp,omitempty"`
	ApplExtId              int64         `protobuf:"fixed64,30,opt,name=appl_ext_id,json=applExtId,proto3" json:"appl_ext_id,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}      `json:"-"`
	XXX_unrecognized       []byte        `json:"-"`
	XXX_sizecache          int32         `json:"-"`
}

func (m *StandardHeader) Reset()         { *m = StandardHeader{} }
func (m *StandardHeader) String() string { return proto.CompactTextString(m) }
func (*StandardHeader) ProtoMessage()    {}
func (*StandardHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{0}
}

func (m *StandardHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StandardHeader.Unmarshal(m, b)
}
func (m *StandardHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StandardHeader.Marshal(b, m, deterministic)
}
func (m *StandardHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandardHeader.Merge(m, src)
}
func (m *StandardHeader) XXX_Size() int {
	return xxx_messageInfo_StandardHeader.Size(m)
}
func (m *StandardHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_StandardHeader.DiscardUnknown(m)
}

var xxx_messageInfo_StandardHeader proto.InternalMessageInfo

func (m *StandardHeader) GetBeginString() string {
	if m != nil {
		return m.BeginString
	}
	return ""
}

func (m *StandardHeader) GetBodyLength() int64 {
	if m != nil {
		return m.BodyLength
	}
	return 0
}

func (m *StandardHeader) GetDeliverToCompId() string {
	if m != nil {
		return m.DeliverToCompId
	}
	return ""
}

func (m *StandardHeader) GetDeliverToSubId() string {
	if m != nil {
		return m.DeliverToSubId
	}
	return ""
}

func (m *StandardHeader) GetMsgSeqNum() int64 {
	if m != nil {
		return m.MsgSeqNum
	}
	return 0
}

func (m *StandardHeader) GetMsgType() MsgTypeEnum {
	if m != nil {
		return m.MsgType
	}
	return MsgTypeEnum_MSG_TYPE_ADJUSTED_POSITION_REPORT
}

func (m *StandardHeader) GetOnBehalfOfCompId() string {
	if m != nil {
		return m.OnBehalfOfCompId
	}
	return ""
}

func (m *StandardHeader) GetOnBehalfOfSubId() string {
	if m != nil {
		return m.OnBehalfOfSubId
	}
	return ""
}

func (m *StandardHeader) GetOrigSendingTime() *Timestamp {
	if m != nil {
		return m.OrigSendingTime
	}
	return nil
}

func (m *StandardHeader) GetPossDupFlag() bool {
	if m != nil {
		return m.PossDupFlag
	}
	return false
}

func (m *StandardHeader) GetPossResend() bool {
	if m != nil {
		return m.PossResend
	}
	return false
}

func (m *StandardHeader) GetSecureData() string {
	if m != nil {
		return m.SecureData
	}
	return ""
}

func (m *StandardHeader) GetSecureDataLen() int64 {
	if m != nil {
		return m.SecureDataLen
	}
	return 0
}

func (m *StandardHeader) GetSenderCompId() string {
	if m != nil {
		return m.SenderCompId
	}
	return ""
}

func (m *StandardHeader) GetSenderSubId() string {
	if m != nil {
		return m.SenderSubId
	}
	return ""
}

func (m *StandardHeader) GetSendingTime() *Timestamp {
	if m != nil {
		return m.SendingTime
	}
	return nil
}

func (m *StandardHeader) GetTargetCompId() string {
	if m != nil {
		return m.TargetCompId
	}
	return ""
}

func (m *StandardHeader) GetTargetSubId() string {
	if m != nil {
		return m.TargetSubId
	}
	return ""
}

func (m *StandardHeader) GetDeliverToLocationId() string {
	if m != nil {
		return m.DeliverToLocationId
	}
	return ""
}

func (m *StandardHeader) GetOnBehalfOfLocationId() string {
	if m != nil {
		return m.OnBehalfOfLocationId
	}
	return ""
}

func (m *StandardHeader) GetSenderLocationId() string {
	if m != nil {
		return m.SenderLocationId
	}
	return ""
}

func (m *StandardHeader) GetTargetLocationId() string {
	if m != nil {
		return m.TargetLocationId
	}
	return ""
}

func (m *StandardHeader) GetLastMsgSeqNumProcessed() int64 {
	if m != nil {
		return m.LastMsgSeqNumProcessed
	}
	return 0
}

func (m *StandardHeader) GetMessageEncoding() string {
	if m != nil {
		return m.MessageEncoding
	}
	return ""
}

func (m *StandardHeader) GetXmlData() string {
	if m != nil {
		return m.XmlData
	}
	return ""
}

func (m *StandardHeader) GetXmlDataLen() int64 {
	if m != nil {
		return m.XmlDataLen
	}
	return 0
}

func (m *StandardHeader) GetApplVerId() ApplVerIDEnum {
	if m != nil {
		return m.ApplVerId
	}
	return ApplVerIDEnum_APPL_VER_ID_UNSPECIFIED
}

func (m *StandardHeader) GetCstmApplVerId() string {
	if m != nil {
		return m.CstmApplVerId
	}
	return ""
}

func (m *StandardHeader) GetHopGrp() []*HopGrp {
	if m != nil {
		return m.HopGrp
	}
	return nil
}

func (m *StandardHeader) GetApplExtId() int64 {
	if m != nil {
		return m.ApplExtId
	}
	return 0
}

type StandardTrailer struct {
	CheckSum             string   `protobuf:"bytes,1,opt,name=check_sum,json=checkSum,proto3" json:"check_sum,omitempty"`
	Signature            string   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	SignatureLength      int64    `protobuf:"fixed64,3,opt,name=signature_length,json=signatureLength,proto3" json:"signature_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StandardTrailer) Reset()         { *m = StandardTrailer{} }
func (m *StandardTrailer) String() string { return proto.CompactTextString(m) }
func (*StandardTrailer) ProtoMessage()    {}
func (*StandardTrailer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{1}
}

func (m *StandardTrailer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StandardTrailer.Unmarshal(m, b)
}
func (m *StandardTrailer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StandardTrailer.Marshal(b, m, deterministic)
}
func (m *StandardTrailer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandardTrailer.Merge(m, src)
}
func (m *StandardTrailer) XXX_Size() int {
	return xxx_messageInfo_StandardTrailer.Size(m)
}
func (m *StandardTrailer) XXX_DiscardUnknown() {
	xxx_messageInfo_StandardTrailer.DiscardUnknown(m)
}

var xxx_messageInfo_StandardTrailer proto.InternalMessageInfo

func (m *StandardTrailer) GetCheckSum() string {
	if m != nil {
		return m.CheckSum
	}
	return ""
}

func (m *StandardTrailer) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *StandardTrailer) GetSignatureLength() int64 {
	if m != nil {
		return m.SignatureLength
	}
	return 0
}

type HopGrp struct {
	HopCompId            string     `protobuf:"bytes,1,opt,name=hop_comp_id,json=hopCompId,proto3" json:"hop_comp_id,omitempty"`
	HopRefId             int64      `protobuf:"fixed64,2,opt,name=hop_ref_id,json=hopRefId,proto3" json:"hop_ref_id,omitempty"`
	HopSendingTime       *Timestamp `protobuf:"bytes,3,opt,name=hop_sending_time,json=hopSendingTime,proto3" json:"hop_sending_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *HopGrp) Reset()         { *m = HopGrp{} }
func (m *HopGrp) String() string { return proto.CompactTextString(m) }
func (*HopGrp) ProtoMessage()    {}
func (*HopGrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{2}
}

func (m *HopGrp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HopGrp.Unmarshal(m, b)
}
func (m *HopGrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HopGrp.Marshal(b, m, deterministic)
}
func (m *HopGrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HopGrp.Merge(m, src)
}
func (m *HopGrp) XXX_Size() int {
	return xxx_messageInfo_HopGrp.Size(m)
}
func (m *HopGrp) XXX_DiscardUnknown() {
	xxx_messageInfo_HopGrp.DiscardUnknown(m)
}

var xxx_messageInfo_HopGrp proto.InternalMessageInfo

func (m *HopGrp) GetHopCompId() string {
	if m != nil {
		return m.HopCompId
	}
	return ""
}

func (m *HopGrp) GetHopRefId() int64 {
	if m != nil {
		return m.HopRefId
	}
	return 0
}

func (m *HopGrp) GetHopSendingTime() *Timestamp {
	if m != nil {
		return m.HopSendingTime
	}
	return nil
}

type Heartbeat struct {
	StandardHeader       *StandardHeader  `protobuf:"bytes,1,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer      *StandardTrailer `protobuf:"bytes,2,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	TestReqId            string           `protobuf:"bytes,3,opt,name=test_req_id,json=testReqId,proto3" json:"test_req_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{3}
}

func (m *Heartbeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Heartbeat.Unmarshal(m, b)
}
func (m *Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Heartbeat.Marshal(b, m, deterministic)
}
func (m *Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heartbeat.Merge(m, src)
}
func (m *Heartbeat) XXX_Size() int {
	return xxx_messageInfo_Heartbeat.Size(m)
}
func (m *Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_Heartbeat proto.InternalMessageInfo

func (m *Heartbeat) GetStandardHeader() *StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *Heartbeat) GetStandardTrailer() *StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func (m *Heartbeat) GetTestReqId() string {
	if m != nil {
		return m.TestReqId
	}
	return ""
}

type TestRequest struct {
	StandardHeader       *StandardHeader  `protobuf:"bytes,1,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer      *StandardTrailer `protobuf:"bytes,2,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	TestReqId            string           `protobuf:"bytes,3,opt,name=test_req_id,json=testReqId,proto3" json:"test_req_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TestRequest) Reset()         { *m = TestRequest{} }
func (m *TestRequest) String() string { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()    {}
func (*TestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{4}
}

func (m *TestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRequest.Unmarshal(m, b)
}
func (m *TestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRequest.Marshal(b, m, deterministic)
}
func (m *TestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRequest.Merge(m, src)
}
func (m *TestRequest) XXX_Size() int {
	return xxx_messageInfo_TestRequest.Size(m)
}
func (m *TestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestRequest proto.InternalMessageInfo

func (m *TestRequest) GetStandardHeader() *StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *TestRequest) GetStandardTrailer() *StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func (m *TestRequest) GetTestReqId() string {
	if m != nil {
		return m.TestReqId
	}
	return ""
}

type ResendRequest struct {
	BeginSeqNo           int64            `protobuf:"fixed64,1,opt,name=begin_seq_no,json=beginSeqNo,proto3" json:"begin_seq_no,omitempty"`
	EndSeqNo             int64            `protobuf:"fixed64,2,opt,name=end_seq_no,json=endSeqNo,proto3" json:"end_seq_no,omitempty"`
	StandardHeader       *StandardHeader  `protobuf:"bytes,3,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer      *StandardTrailer `protobuf:"bytes,4,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ResendRequest) Reset()         { *m = ResendRequest{} }
func (m *ResendRequest) String() string { return proto.CompactTextString(m) }
func (*ResendRequest) ProtoMessage()    {}
func (*ResendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{5}
}

func (m *ResendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResendRequest.Unmarshal(m, b)
}
func (m *ResendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResendRequest.Marshal(b, m, deterministic)
}
func (m *ResendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResendRequest.Merge(m, src)
}
func (m *ResendRequest) XXX_Size() int {
	return xxx_messageInfo_ResendRequest.Size(m)
}
func (m *ResendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResendRequest proto.InternalMessageInfo

func (m *ResendRequest) GetBeginSeqNo() int64 {
	if m != nil {
		return m.BeginSeqNo
	}
	return 0
}

func (m *ResendRequest) GetEndSeqNo() int64 {
	if m != nil {
		return m.EndSeqNo
	}
	return 0
}

func (m *ResendRequest) GetStandardHeader() *StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *ResendRequest) GetStandardTrailer() *StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

type Reject struct {
	RefSeqNum       int64            `protobuf:"fixed64,1,opt,name=ref_seq_num,json=refSeqNum,proto3" json:"ref_seq_num,omitempty"`
	StandardHeader  *StandardHeader  `protobuf:"bytes,2,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer *StandardTrailer `protobuf:"bytes,3,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	Text            string           `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	EncodedText     string           `protobuf:"bytes,5,opt,name=encoded_text,json=encodedText,proto3" json:"encoded_text,omitempty"`
	EncodedTextLen  int64            `protobuf:"fixed64,6,opt,name=encoded_text_len,json=encodedTextLen,proto3" json:"encoded_text_len,omitempty"`
	RefMsgType      RefMsgTypeEnum   `protobuf:"varint,7,opt,name=ref_msg_type,json=refMsgType,proto3,enum=Session.RefMsgTypeEnum" json:"ref_msg_type,omitempty"`
	RefTagId        int64            `protobuf:"fixed64,8,opt,name=ref_tag_id,json=refTagId,proto3" json:"ref_tag_id,omitempty"`
	// Types that are valid to be assigned to SessionRejectReasonUnion:
	//	*Reject_SessionRejectReason
	//	*Reject_SessionRejectReasonReserved100Plus
	SessionRejectReasonUnion isReject_SessionRejectReasonUnion `protobuf_oneof:"session_reject_reason_union"`
	RefApplExtId             int64                             `protobuf:"fixed64,11,opt,name=ref_appl_ext_id,json=refApplExtId,proto3" json:"ref_appl_ext_id,omitempty"`
	RefApplVerId             RefApplVerIDEnum                  `protobuf:"varint,12,opt,name=ref_appl_ver_id,json=refApplVerId,proto3,enum=Session.RefApplVerIDEnum" json:"ref_appl_ver_id,omitempty"`
	RefCstmApplVerId         string                            `protobuf:"bytes,13,opt,name=ref_cstm_appl_ver_id,json=refCstmApplVerId,proto3" json:"ref_cstm_appl_ver_id,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                          `json:"-"`
	XXX_unrecognized         []byte                            `json:"-"`
	XXX_sizecache            int32                             `json:"-"`
}

func (m *Reject) Reset()         { *m = Reject{} }
func (m *Reject) String() string { return proto.CompactTextString(m) }
func (*Reject) ProtoMessage()    {}
func (*Reject) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{6}
}

func (m *Reject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reject.Unmarshal(m, b)
}
func (m *Reject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reject.Marshal(b, m, deterministic)
}
func (m *Reject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reject.Merge(m, src)
}
func (m *Reject) XXX_Size() int {
	return xxx_messageInfo_Reject.Size(m)
}
func (m *Reject) XXX_DiscardUnknown() {
	xxx_messageInfo_Reject.DiscardUnknown(m)
}

var xxx_messageInfo_Reject proto.InternalMessageInfo

func (m *Reject) GetRefSeqNum() int64 {
	if m != nil {
		return m.RefSeqNum
	}
	return 0
}

func (m *Reject) GetStandardHeader() *StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *Reject) GetStandardTrailer() *StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func (m *Reject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Reject) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

func (m *Reject) GetEncodedTextLen() int64 {
	if m != nil {
		return m.EncodedTextLen
	}
	return 0
}

func (m *Reject) GetRefMsgType() RefMsgTypeEnum {
	if m != nil {
		return m.RefMsgType
	}
	return RefMsgTypeEnum_REF_MSG_TYPE_ADJUSTED_POSITION_REPORT
}

func (m *Reject) GetRefTagId() int64 {
	if m != nil {
		return m.RefTagId
	}
	return 0
}

type isReject_SessionRejectReasonUnion interface {
	isReject_SessionRejectReasonUnion()
}

type Reject_SessionRejectReason struct {
	SessionRejectReason SessionRejectReasonEnum `protobuf:"varint,9,opt,name=session_reject_reason,json=sessionRejectReason,proto3,enum=Session.SessionRejectReasonEnum,oneof"`
}

type Reject_SessionRejectReasonReserved100Plus struct {
	SessionRejectReasonReserved100Plus uint32 `protobuf:"fixed32,10,opt,name=session_reject_reason_reserved100plus,json=sessionRejectReasonReserved100plus,proto3,oneof"`
}

func (*Reject_SessionRejectReason) isReject_SessionRejectReasonUnion() {}

func (*Reject_SessionRejectReasonReserved100Plus) isReject_SessionRejectReasonUnion() {}

func (m *Reject) GetSessionRejectReasonUnion() isReject_SessionRejectReasonUnion {
	if m != nil {
		return m.SessionRejectReasonUnion
	}
	return nil
}

func (m *Reject) GetSessionRejectReason() SessionRejectReasonEnum {
	if x, ok := m.GetSessionRejectReasonUnion().(*Reject_SessionRejectReason); ok {
		return x.SessionRejectReason
	}
	return SessionRejectReasonEnum_SESSION_REJECT_REASON_UNSPECIFIED
}

func (m *Reject) GetSessionRejectReasonReserved100Plus() uint32 {
	if x, ok := m.GetSessionRejectReasonUnion().(*Reject_SessionRejectReasonReserved100Plus); ok {
		return x.SessionRejectReasonReserved100Plus
	}
	return 0
}

func (m *Reject) GetRefApplExtId() int64 {
	if m != nil {
		return m.RefApplExtId
	}
	return 0
}

func (m *Reject) GetRefApplVerId() RefApplVerIDEnum {
	if m != nil {
		return m.RefApplVerId
	}
	return RefApplVerIDEnum_REF_APPL_VER_ID_UNSPECIFIED
}

func (m *Reject) GetRefCstmApplVerId() string {
	if m != nil {
		return m.RefCstmApplVerId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Reject) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Reject_SessionRejectReason)(nil),
		(*Reject_SessionRejectReasonReserved100Plus)(nil),
	}
}

type SequenceReset struct {
	NewSeqNo             int64            `protobuf:"fixed64,1,opt,name=new_seq_no,json=newSeqNo,proto3" json:"new_seq_no,omitempty"`
	StandardHeader       *StandardHeader  `protobuf:"bytes,2,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer      *StandardTrailer `protobuf:"bytes,3,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	GapFillFlag          bool             `protobuf:"varint,4,opt,name=gap_fill_flag,json=gapFillFlag,proto3" json:"gap_fill_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SequenceReset) Reset()         { *m = SequenceReset{} }
func (m *SequenceReset) String() string { return proto.CompactTextString(m) }
func (*SequenceReset) ProtoMessage()    {}
func (*SequenceReset) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{7}
}

func (m *SequenceReset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SequenceReset.Unmarshal(m, b)
}
func (m *SequenceReset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SequenceReset.Marshal(b, m, deterministic)
}
func (m *SequenceReset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceReset.Merge(m, src)
}
func (m *SequenceReset) XXX_Size() int {
	return xxx_messageInfo_SequenceReset.Size(m)
}
func (m *SequenceReset) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceReset.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceReset proto.InternalMessageInfo

func (m *SequenceReset) GetNewSeqNo() int64 {
	if m != nil {
		return m.NewSeqNo
	}
	return 0
}

func (m *SequenceReset) GetStandardHeader() *StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *SequenceReset) GetStandardTrailer() *StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func (m *SequenceReset) GetGapFillFlag() bool {
	if m != nil {
		return m.GapFillFlag
	}
	return false
}

type Logout struct {
	StandardHeader  *StandardHeader  `protobuf:"bytes,1,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer *StandardTrailer `protobuf:"bytes,2,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	Text            string           `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	EncodedText     string           `protobuf:"bytes,4,opt,name=encoded_text,json=encodedText,proto3" json:"encoded_text,omitempty"`
	EncodedTextLen  int64            `protobuf:"fixed64,5,opt,name=encoded_text_len,json=encodedTextLen,proto3" json:"encoded_text_len,omitempty"`
	// Types that are valid to be assigned to SessionStatusUnion:
	//	*Logout_SessionStatus
	//	*Logout_SessionStatusReserved100Plus
	SessionStatusUnion   isLogout_SessionStatusUnion `protobuf_oneof:"session_status_union"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Logout) Reset()         { *m = Logout{} }
func (m *Logout) String() string { return proto.CompactTextString(m) }
func (*Logout) ProtoMessage()    {}
func (*Logout) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{8}
}

func (m *Logout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Logout.Unmarshal(m, b)
}
func (m *Logout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Logout.Marshal(b, m, deterministic)
}
func (m *Logout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logout.Merge(m, src)
}
func (m *Logout) XXX_Size() int {
	return xxx_messageInfo_Logout.Size(m)
}
func (m *Logout) XXX_DiscardUnknown() {
	xxx_messageInfo_Logout.DiscardUnknown(m)
}

var xxx_messageInfo_Logout proto.InternalMessageInfo

func (m *Logout) GetStandardHeader() *StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *Logout) GetStandardTrailer() *StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func (m *Logout) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Logout) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

func (m *Logout) GetEncodedTextLen() int64 {
	if m != nil {
		return m.EncodedTextLen
	}
	return 0
}

type isLogout_SessionStatusUnion interface {
	isLogout_SessionStatusUnion()
}

type Logout_SessionStatus struct {
	SessionStatus SessionStatusEnum `protobuf:"varint,6,opt,name=session_status,json=sessionStatus,proto3,enum=Session.SessionStatusEnum,oneof"`
}

type Logout_SessionStatusReserved100Plus struct {
	SessionStatusReserved100Plus uint32 `protobuf:"fixed32,7,opt,name=session_status_reserved100plus,json=sessionStatusReserved100plus,proto3,oneof"`
}

func (*Logout_SessionStatus) isLogout_SessionStatusUnion() {}

func (*Logout_SessionStatusReserved100Plus) isLogout_SessionStatusUnion() {}

func (m *Logout) GetSessionStatusUnion() isLogout_SessionStatusUnion {
	if m != nil {
		return m.SessionStatusUnion
	}
	return nil
}

func (m *Logout) GetSessionStatus() SessionStatusEnum {
	if x, ok := m.GetSessionStatusUnion().(*Logout_SessionStatus); ok {
		return x.SessionStatus
	}
	return SessionStatusEnum_SESSION_STATUS_UNSPECIFIED
}

func (m *Logout) GetSessionStatusReserved100Plus() uint32 {
	if x, ok := m.GetSessionStatusUnion().(*Logout_SessionStatusReserved100Plus); ok {
		return x.SessionStatusReserved100Plus
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Logout) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Logout_SessionStatus)(nil),
		(*Logout_SessionStatusReserved100Plus)(nil),
	}
}

type Logon struct {
	EncryptMethod           EncryptMethodEnum    `protobuf:"varint,1,opt,name=encrypt_method,json=encryptMethod,proto3,enum=Session.EncryptMethodEnum" json:"encrypt_method,omitempty"`
	RawData                 string               `protobuf:"bytes,2,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	RawDataLength           int64                `protobuf:"fixed64,3,opt,name=raw_data_length,json=rawDataLength,proto3" json:"raw_data_length,omitempty"`
	StandardHeader          *StandardHeader      `protobuf:"bytes,4,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer         *StandardTrailer     `protobuf:"bytes,5,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	HeartBtInt              int64                `protobuf:"fixed64,6,opt,name=heart_bt_int,json=heartBtInt,proto3" json:"heart_bt_int,omitempty"`
	ResetSeqNumFlag         bool                 `protobuf:"varint,7,opt,name=reset_seq_num_flag,json=resetSeqNumFlag,proto3" json:"reset_seq_num_flag,omitempty"`
	MaxMessageSize          int64                `protobuf:"fixed64,8,opt,name=max_message_size,json=maxMessageSize,proto3" json:"max_message_size,omitempty"`
	Password                string               `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	TestMessageIndicator    bool                 `protobuf:"varint,10,opt,name=test_message_indicator,json=testMessageIndicator,proto3" json:"test_message_indicator,omitempty"`
	Username                string               `protobuf:"bytes,11,opt,name=username,proto3" json:"username,omitempty"`
	DefaultApplVerId        DefaultApplVerIDEnum `protobuf:"varint,12,opt,name=default_appl_ver_id,json=defaultApplVerId,proto3,enum=Session.DefaultApplVerIDEnum" json:"default_appl_ver_id,omitempty"`
	MsgTypeGrp              []*MsgTypeGrp        `protobuf:"bytes,13,rep,name=msg_type_grp,json=msgTypeGrp,proto3" json:"msg_type_grp,omitempty"`
	NextExpectedMsgSeqNum   int64                `protobuf:"fixed64,14,opt,name=next_expected_msg_seq_num,json=nextExpectedMsgSeqNum,proto3" json:"next_expected_msg_seq_num,omitempty"`
	DefaultApplExtId        int64                `protobuf:"fixed64,15,opt,name=default_appl_ext_id,json=defaultApplExtId,proto3" json:"default_appl_ext_id,omitempty"`
	DefaultCstmApplVerId    string               `protobuf:"bytes,16,opt,name=default_cstm_appl_ver_id,json=defaultCstmApplVerId,proto3" json:"default_cstm_appl_ver_id,omitempty"`
	EncodedText             string               `protobuf:"bytes,17,opt,name=encoded_text,json=encodedText,proto3" json:"encoded_text,omitempty"`
	EncodedTextLen          int64                `protobuf:"fixed64,18,opt,name=encoded_text_len,json=encodedTextLen,proto3" json:"encoded_text_len,omitempty"`
	EncryptedNewPassword    string               `protobuf:"bytes,19,opt,name=encrypted_new_password,json=encryptedNewPassword,proto3" json:"encrypted_new_password,omitempty"`
	EncryptedNewPasswordLen int64                `protobuf:"fixed64,20,opt,name=encrypted_new_password_len,json=encryptedNewPasswordLen,proto3" json:"encrypted_new_password_len,omitempty"`
	EncryptedPassword       string               `protobuf:"bytes,21,opt,name=encrypted_password,json=encryptedPassword,proto3" json:"encrypted_password,omitempty"`
	EncryptedPasswordLen    int64                `protobuf:"fixed64,22,opt,name=encrypted_password_len,json=encryptedPasswordLen,proto3" json:"encrypted_password_len,omitempty"`
	// Types that are valid to be assigned to EncryptedPasswordMethodUnion:
	//	*Logon_EncryptedPasswordMethod
	//	*Logon_EncryptedPasswordMethodReserved100Plus
	EncryptedPasswordMethodUnion isLogon_EncryptedPasswordMethodUnion `protobuf_oneof:"encrypted_password_method_union"`
	NewPassword                  string                               `protobuf:"bytes,25,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	// Types that are valid to be assigned to SessionStatusUnion:
	//	*Logon_SessionStatus
	//	*Logon_SessionStatusReserved100Plus
	SessionStatusUnion   isLogon_SessionStatusUnion `protobuf_oneof:"session_status_union"`
	Text                 string                     `protobuf:"bytes,28,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Logon) Reset()         { *m = Logon{} }
func (m *Logon) String() string { return proto.CompactTextString(m) }
func (*Logon) ProtoMessage()    {}
func (*Logon) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{9}
}

func (m *Logon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Logon.Unmarshal(m, b)
}
func (m *Logon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Logon.Marshal(b, m, deterministic)
}
func (m *Logon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logon.Merge(m, src)
}
func (m *Logon) XXX_Size() int {
	return xxx_messageInfo_Logon.Size(m)
}
func (m *Logon) XXX_DiscardUnknown() {
	xxx_messageInfo_Logon.DiscardUnknown(m)
}

var xxx_messageInfo_Logon proto.InternalMessageInfo

func (m *Logon) GetEncryptMethod() EncryptMethodEnum {
	if m != nil {
		return m.EncryptMethod
	}
	return EncryptMethodEnum_ENCRYPT_METHOD_UNSPECIFIED
}

func (m *Logon) GetRawData() string {
	if m != nil {
		return m.RawData
	}
	return ""
}

func (m *Logon) GetRawDataLength() int64 {
	if m != nil {
		return m.RawDataLength
	}
	return 0
}

func (m *Logon) GetStandardHeader() *StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *Logon) GetStandardTrailer() *StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func (m *Logon) GetHeartBtInt() int64 {
	if m != nil {
		return m.HeartBtInt
	}
	return 0
}

func (m *Logon) GetResetSeqNumFlag() bool {
	if m != nil {
		return m.ResetSeqNumFlag
	}
	return false
}

func (m *Logon) GetMaxMessageSize() int64 {
	if m != nil {
		return m.MaxMessageSize
	}
	return 0
}

func (m *Logon) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Logon) GetTestMessageIndicator() bool {
	if m != nil {
		return m.TestMessageIndicator
	}
	return false
}

func (m *Logon) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Logon) GetDefaultApplVerId() DefaultApplVerIDEnum {
	if m != nil {
		return m.DefaultApplVerId
	}
	return DefaultApplVerIDEnum_DEFAULT_APPL_VER_ID_UNSPECIFIED
}

func (m *Logon) GetMsgTypeGrp() []*MsgTypeGrp {
	if m != nil {
		return m.MsgTypeGrp
	}
	return nil
}

func (m *Logon) GetNextExpectedMsgSeqNum() int64 {
	if m != nil {
		return m.NextExpectedMsgSeqNum
	}
	return 0
}

func (m *Logon) GetDefaultApplExtId() int64 {
	if m != nil {
		return m.DefaultApplExtId
	}
	return 0
}

func (m *Logon) GetDefaultCstmApplVerId() string {
	if m != nil {
		return m.DefaultCstmApplVerId
	}
	return ""
}

func (m *Logon) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

func (m *Logon) GetEncodedTextLen() int64 {
	if m != nil {
		return m.EncodedTextLen
	}
	return 0
}

func (m *Logon) GetEncryptedNewPassword() string {
	if m != nil {
		return m.EncryptedNewPassword
	}
	return ""
}

func (m *Logon) GetEncryptedNewPasswordLen() int64 {
	if m != nil {
		return m.EncryptedNewPasswordLen
	}
	return 0
}

func (m *Logon) GetEncryptedPassword() string {
	if m != nil {
		return m.EncryptedPassword
	}
	return ""
}

func (m *Logon) GetEncryptedPasswordLen() int64 {
	if m != nil {
		return m.EncryptedPasswordLen
	}
	return 0
}

type isLogon_EncryptedPasswordMethodUnion interface {
	isLogon_EncryptedPasswordMethodUnion()
}

type Logon_EncryptedPasswordMethod struct {
	EncryptedPasswordMethod int64 `protobuf:"fixed64,23,opt,name=encrypted_password_method,json=encryptedPasswordMethod,proto3,oneof"`
}

type Logon_EncryptedPasswordMethodReserved100Plus struct {
	EncryptedPasswordMethodReserved100Plus uint32 `protobuf:"fixed32,24,opt,name=encrypted_password_method_reserved100plus,json=encryptedPasswordMethodReserved100plus,proto3,oneof"`
}

func (*Logon_EncryptedPasswordMethod) isLogon_EncryptedPasswordMethodUnion() {}

func (*Logon_EncryptedPasswordMethodReserved100Plus) isLogon_EncryptedPasswordMethodUnion() {}

func (m *Logon) GetEncryptedPasswordMethodUnion() isLogon_EncryptedPasswordMethodUnion {
	if m != nil {
		return m.EncryptedPasswordMethodUnion
	}
	return nil
}

func (m *Logon) GetEncryptedPasswordMethod() int64 {
	if x, ok := m.GetEncryptedPasswordMethodUnion().(*Logon_EncryptedPasswordMethod); ok {
		return x.EncryptedPasswordMethod
	}
	return 0
}

func (m *Logon) GetEncryptedPasswordMethodReserved100Plus() uint32 {
	if x, ok := m.GetEncryptedPasswordMethodUnion().(*Logon_EncryptedPasswordMethodReserved100Plus); ok {
		return x.EncryptedPasswordMethodReserved100Plus
	}
	return 0
}

func (m *Logon) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

type isLogon_SessionStatusUnion interface {
	isLogon_SessionStatusUnion()
}

type Logon_SessionStatus struct {
	SessionStatus SessionStatusEnum `protobuf:"varint,26,opt,name=session_status,json=sessionStatus,proto3,enum=Session.SessionStatusEnum,oneof"`
}

type Logon_SessionStatusReserved100Plus struct {
	SessionStatusReserved100Plus uint32 `protobuf:"fixed32,27,opt,name=session_status_reserved100plus,json=sessionStatusReserved100plus,proto3,oneof"`
}

func (*Logon_SessionStatus) isLogon_SessionStatusUnion() {}

func (*Logon_SessionStatusReserved100Plus) isLogon_SessionStatusUnion() {}

func (m *Logon) GetSessionStatusUnion() isLogon_SessionStatusUnion {
	if m != nil {
		return m.SessionStatusUnion
	}
	return nil
}

func (m *Logon) GetSessionStatus() SessionStatusEnum {
	if x, ok := m.GetSessionStatusUnion().(*Logon_SessionStatus); ok {
		return x.SessionStatus
	}
	return SessionStatusEnum_SESSION_STATUS_UNSPECIFIED
}

func (m *Logon) GetSessionStatusReserved100Plus() uint32 {
	if x, ok := m.GetSessionStatusUnion().(*Logon_SessionStatusReserved100Plus); ok {
		return x.SessionStatusReserved100Plus
	}
	return 0
}

func (m *Logon) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Logon) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Logon_EncryptedPasswordMethod)(nil),
		(*Logon_EncryptedPasswordMethodReserved100Plus)(nil),
		(*Logon_SessionStatus)(nil),
		(*Logon_SessionStatusReserved100Plus)(nil),
	}
}

type XMLnonFIX struct {
	StandardHeader       *StandardHeader  `protobuf:"bytes,1,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	StandardTrailer      *StandardTrailer `protobuf:"bytes,2,opt,name=standard_trailer,json=standardTrailer,proto3" json:"standard_trailer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *XMLnonFIX) Reset()         { *m = XMLnonFIX{} }
func (m *XMLnonFIX) String() string { return proto.CompactTextString(m) }
func (*XMLnonFIX) ProtoMessage()    {}
func (*XMLnonFIX) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{10}
}

func (m *XMLnonFIX) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XMLnonFIX.Unmarshal(m, b)
}
func (m *XMLnonFIX) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XMLnonFIX.Marshal(b, m, deterministic)
}
func (m *XMLnonFIX) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XMLnonFIX.Merge(m, src)
}
func (m *XMLnonFIX) XXX_Size() int {
	return xxx_messageInfo_XMLnonFIX.Size(m)
}
func (m *XMLnonFIX) XXX_DiscardUnknown() {
	xxx_messageInfo_XMLnonFIX.DiscardUnknown(m)
}

var xxx_messageInfo_XMLnonFIX proto.InternalMessageInfo

func (m *XMLnonFIX) GetStandardHeader() *StandardHeader {
	if m != nil {
		return m.StandardHeader
	}
	return nil
}

func (m *XMLnonFIX) GetStandardTrailer() *StandardTrailer {
	if m != nil {
		return m.StandardTrailer
	}
	return nil
}

func init() {
	proto.RegisterEnum("Session.MsgTypeEnum", MsgTypeEnum_name, MsgTypeEnum_value)
	proto.RegisterEnum("Session.ApplVerIDEnum", ApplVerIDEnum_name, ApplVerIDEnum_value)
	proto.RegisterEnum("Session.RefMsgTypeEnum", RefMsgTypeEnum_name, RefMsgTypeEnum_value)
	proto.RegisterEnum("Session.RefApplVerIDEnum", RefApplVerIDEnum_name, RefApplVerIDEnum_value)
	proto.RegisterEnum("Session.SessionRejectReasonEnum", SessionRejectReasonEnum_name, SessionRejectReasonEnum_value)
	proto.RegisterEnum("Session.SessionStatusEnum", SessionStatusEnum_name, SessionStatusEnum_value)
	proto.RegisterEnum("Session.EncryptMethodEnum", EncryptMethodEnum_name, EncryptMethodEnum_value)
	proto.RegisterEnum("Session.DefaultApplVerIDEnum", DefaultApplVerIDEnum_name, DefaultApplVerIDEnum_value)
	proto.RegisterType((*StandardHeader)(nil), "Session.StandardHeader")
	proto.RegisterType((*StandardTrailer)(nil), "Session.StandardTrailer")
	proto.RegisterType((*HopGrp)(nil), "Session.HopGrp")
	proto.RegisterType((*Heartbeat)(nil), "Session.Heartbeat")
	proto.RegisterType((*TestRequest)(nil), "Session.TestRequest")
	proto.RegisterType((*ResendRequest)(nil), "Session.ResendRequest")
	proto.RegisterType((*Reject)(nil), "Session.Reject")
	proto.RegisterType((*SequenceReset)(nil), "Session.SequenceReset")
	proto.RegisterType((*Logout)(nil), "Session.Logout")
	proto.RegisterType((*Logon)(nil), "Session.Logon")
	proto.RegisterType((*XMLnonFIX)(nil), "Session.XMLnonFIX")
}

func init() { proto.RegisterFile("session.proto", fileDescriptor_3a6be1b361fa6f14) }

var fileDescriptor_3a6be1b361fa6f14 = []byte{
	// 5639 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x7c, 0xdb, 0x6f, 0x1b, 0x49,
	0x76, 0xbe, 0x29, 0x89, 0xba, 0x94, 0x6e, 0xad, 0xb2, 0x2c, 0xcb, 0xf2, 0x4d, 0x96, 0x7c, 0x91,
	0x25, 0x5b, 0x96, 0x28, 0xc9, 0xb7, 0x99, 0xd9, 0x99, 0x16, 0x59, 0xa2, 0xda, 0x22, 0xbb, 0xe9,
	0xee, 0xa6, 0x64, 0xcd, 0xfe, 0xf6, 0xd7, 0x4b, 0x89, 0x2d, 0x89, 0x33, 0xbc, 0x99, 0xa4, 0xc6,
	0x9a, 0xd9, 0x20, 0xc9, 0x02, 0x79, 0x0b, 0x36, 0x17, 0xc0, 0xc8, 0x53, 0x16, 0x48, 0x16, 0x08,
	0x30, 0x08, 0xe6, 0x2d, 0x58, 0xe4, 0x25, 0x40, 0xde, 0xf3, 0x94, 0x87, 0x24, 0xc8, 0x1f, 0x91,
	0x3c, 0x07, 0x08, 0x10, 0x20, 0xe8, 0xaa, 0xea, 0xea, 0xaa, 0x62, 0x37, 0x49, 0x1b, 0x03, 0x24,
	0xc8, 0xd3, 0x8e, 0xd4, 0xdf, 0x77, 0xea, 0xd4, 0xa9, 0x53, 0xe7, 0x9c, 0xfa, 0x76, 0x34, 0x60,
	0xbc, 0xe9, 0x36, 0x9b, 0xa5, 0x5a, 0x75, 0xb5, 0xde, 0xa8, 0xb5, 0x6a, 0x70, 0xc8, 0x22, 0x3f,
	0xce, 0x81, 0x8a, 0xdb, 0x2a, 0x90, 0x5f, 0xce, 0x8d, 0x9c, 0x94, 0x2e, 0xe8, 0x3f, 0x8e, 0x1d,
	0xd7, 0x2a, 0x15, 0x1f, 0xbd, 0xf0, 0x1f, 0xe3, 0x60, 0xc2, 0x6a, 0x15, 0xaa, 0xc5, 0x42, 0xa3,
	0xb8, 0xeb, 0x16, 0x8a, 0x6e, 0x03, 0x26, 0xc0, 0xd8, 0x91, 0x7b, 0x5a, 0xaa, 0x3a, 0xcd, 0x56,
	0xa3, 0x54, 0x3d, 0x9d, 0x8d, 0xcd, 0xc7, 0x96, 0x46, 0xb6, 0x27, 0x7f, 0xfd, 0xc3, 0xf5, 0xe1,
	0x4b, 0x97, 0x2e, 0xfd, 0xc5, 0x0f, 0xd7, 0x95, 0xef, 0x7f, 0xb8, 0xde, 0x6f, 0x8e, 0x62, 0x90,
	0x85, 0x31, 0x70, 0x0d, 0x8c, 0x1e, 0xd5, 0x8a, 0xdf, 0x3a, 0x65, 0xb7, 0x7a, 0xda, 0x3a, 0x9b,
	0xed, 0x9b, 0x8f, 0x2d, 0x29, 0x98, 0x32, 0x42, 0x28, 0x97, 0x31, 0x05, 0x78, 0x98, 0x0c, 0x86,
	0xc0, 0x4f, 0x01, 0x2c, 0xba, 0xe5, 0xd2, 0x37, 0x6e, 0xc3, 0x69, 0xd5, 0x9c, 0xe3, 0x5a, 0xa5,
	0xee, 0x94, 0x8a, 0xb3, 0xfd, 0x6c, 0xad, 0xdf, 0xe7, 0xd7, 0x9a, 0xa4, 0x50, 0xbb, 0x96, 0xac,
	0x55, 0xea, 0x5a, 0x11, 0xbe, 0x04, 0x53, 0x1c, 0xbb, 0x79, 0x7e, 0xe4, 0x91, 0x07, 0x18, 0xf9,
	0x97, 0x3c, 0x79, 0x82, 0x91, 0xad, 0xf3, 0x23, 0xad, 0x08, 0x9f, 0x80, 0xd1, 0x4a, 0xf3, 0xd4,
	0x69, 0xba, 0x6f, 0x9d, 0xea, 0x79, 0x65, 0x36, 0xce, 0x7c, 0x5d, 0x20, 0xac, 0x19, 0xcc, 0x1a,
	0xa9, 0x34, 0x4f, 0x2d, 0xf7, 0xad, 0x7e, 0x5e, 0x81, 0x5f, 0x80, 0x61, 0x8f, 0xd0, 0xfa, 0xb6,
	0xee, 0xce, 0x0e, 0xce, 0xc7, 0x96, 0x26, 0x12, 0xd3, 0xab, 0x34, 0xc8, 0xab, 0xd9, 0xe6, 0xa9,
	0xfd, 0x6d, 0xdd, 0x45, 0xd5, 0xf3, 0x0a, 0xb6, 0xb1, 0xc8, 0xaf, 0x3c, 0x54, 0x21, 0x5f, 0xe1,
	0xe7, 0x60, 0xba, 0x56, 0x75, 0x8e, 0xdc, 0xb3, 0x42, 0xf9, 0xc4, 0xa9, 0x9d, 0xb0, 0xed, 0x0e,
	0x31, 0x8f, 0x9b, 0x3c, 0x4f, 0xa9, 0x55, 0xb7, 0x31, 0xd6, 0x38, 0xa1, 0xfb, 0xfd, 0x0c, 0x5c,
	0x16, 0x0c, 0xd0, 0x1d, 0x0f, 0x33, 0x7e, 0x4b, 0x08, 0x57, 0xc0, 0x27, 0x5b, 0xde, 0x03, 0x53,
	0xb5, 0x46, 0xc9, 0xdb, 0x73, 0xb5, 0x58, 0xaa, 0x9e, 0x3a, 0xad, 0x52, 0xc5, 0x9d, 0x1d, 0x99,
	0x8f, 0x2d, 0x8d, 0x26, 0x26, 0x56, 0xbd, 0xd4, 0xb0, 0x4b, 0x15, 0xb7, 0xd9, 0x2a, 0x54, 0xea,
	0xd8, 0xd8, 0x77, 0xc4, 0xd8, 0x14, 0x35, 0xd6, 0x28, 0x9d, 0x5a, 0x84, 0xe8, 0xc1, 0xe0, 0x06,
	0x18, 0xaf, 0xd7, 0x9a, 0x4d, 0xa7, 0x78, 0x5e, 0x77, 0x4e, 0xca, 0x85, 0xd3, 0x59, 0x30, 0x1f,
	0x5b, 0x1a, 0xc6, 0xc4, 0x15, 0x42, 0x1c, 0x26, 0x09, 0xe2, 0xa1, 0x52, 0xe7, 0xf5, 0x9d, 0x72,
	0x01, 0x27, 0x08, 0x26, 0x35, 0x5c, 0xcf, 0x87, 0xd9, 0x51, 0x46, 0x29, 0xf0, 0x14, 0xe0, 0x61,
	0x4c, 0x0c, 0xf1, 0x18, 0x4d, 0xf7, 0xf8, 0xbc, 0xe1, 0x3a, 0xc5, 0x42, 0xab, 0x30, 0x3b, 0xc6,
	0xb6, 0xfa, 0x53, 0xc2, 0xe8, 0x23, 0x0c, 0x82, 0x49, 0x15, 0x5a, 0x05, 0xf8, 0x0c, 0x4c, 0x72,
	0x0c, 0x2f, 0x17, 0x67, 0xc7, 0xd9, 0xe1, 0x7e, 0xc9, 0x27, 0xe2, 0x78, 0xc0, 0xca, 0xb8, 0x55,
	0xb8, 0x05, 0x26, 0xbc, 0x25, 0xdd, 0x06, 0x3b, 0x98, 0x09, 0xb6, 0xda, 0x3a, 0x1f, 0xd8, 0x31,
	0x02, 0xa3, 0x87, 0xb2, 0xe1, 0x5d, 0x3d, 0x4c, 0xa3, 0xc7, 0x31, 0xc9, 0x58, 0x09, 0xe1, 0xa6,
	0x10, 0x14, 0x39, 0x8a, 0x6d, 0x30, 0x26, 0x9c, 0x82, 0x12, 0x79, 0x0a, 0x9b, 0xfc, 0x29, 0x8c,
	0x36, 0xb9, 0x13, 0xd8, 0x02, 0x13, 0xad, 0x42, 0xe3, 0xd4, 0x6d, 0x31, 0x7f, 0xa7, 0xd8, 0xca,
	0xcf, 0x05, 0x7f, 0x09, 0x2c, 0xf0, 0x97, 0xd2, 0xa8, 0xbf, 0x90, 0xb1, 0x5e, 0x08, 0xfe, 0x12,
	0x14, 0xf1, 0x37, 0x05, 0x66, 0xb8, 0x9b, 0x56, 0xae, 0x1d, 0x17, 0x5a, 0xa5, 0x5a, 0xd5, 0x63,
	0x5f, 0x66, 0xec, 0x3f, 0x0d, 0xd8, 0x03, 0xe6, 0x65, 0x76, 0xdd, 0x32, 0x14, 0xac, 0x15, 0x61,
	0x1a, 0xcc, 0x0a, 0xf9, 0xcb, 0xdb, 0x99, 0x66, 0x76, 0xfe, 0x84, 0xb7, 0x33, 0x1d, 0x24, 0x31,
	0x67, 0xe8, 0x33, 0x00, 0x69, 0xcc, 0x79, 0x13, 0x57, 0x98, 0x89, 0x3f, 0xe2, 0x4d, 0x28, 0x04,
	0x2a, 0xd2, 0x69, 0x08, 0x78, 0xfa, 0x0c, 0xa3, 0xff, 0xb1, 0x40, 0x27, 0x50, 0x8e, 0xbe, 0x07,
	0xe6, 0xca, 0x85, 0x66, 0xcb, 0xe1, 0xea, 0x87, 0x53, 0x6f, 0xd4, 0x8e, 0xdd, 0x66, 0xd3, 0x2d,
	0xce, 0x5e, 0x65, 0xc9, 0xf6, 0x36, 0xc6, 0x2a, 0x49, 0xdc, 0x9c, 0xf1, 0x28, 0x59, 0xbf, 0x9a,
	0xe4, 0x7c, 0x38, 0x7c, 0x09, 0x94, 0x8a, 0xdb, 0x6c, 0x16, 0x4e, 0x5d, 0xc7, 0xad, 0x1e, 0xd7,
	0xbc, 0xd3, 0x9d, 0x9d, 0x0d, 0xb2, 0x3c, 0xc6, 0x3c, 0x89, 0x9b, 0x93, 0x14, 0x88, 0x28, 0x0e,
	0x2e, 0x83, 0xe1, 0x8b, 0x4a, 0x99, 0xdc, 0x8c, 0x6b, 0x8c, 0xf3, 0xcf, 0xc1, 0xcd, 0x88, 0x9b,
	0x43, 0x17, 0x95, 0x32, 0xbe, 0x16, 0xeb, 0x60, 0xcc, 0xc7, 0xe2, 0x3b, 0x31, 0xc7, 0xdc, 0xfc,
	0xa7, 0xe0, 0x4e, 0xc4, 0x4d, 0x40, 0xf1, 0xde, 0x85, 0x48, 0x83, 0xd1, 0x42, 0xbd, 0x5e, 0x76,
	0xbc, 0x53, 0x2f, 0x15, 0x67, 0xaf, 0xe3, 0xa2, 0x37, 0xc3, 0x8a, 0x9e, 0x5a, 0xaf, 0x97, 0xf7,
	0xdd, 0x86, 0x96, 0x62, 0x65, 0xef, 0x6c, 0x80, 0x79, 0x3b, 0x64, 0x8e, 0x14, 0xe8, 0xf7, 0x22,
	0x7c, 0x0e, 0x94, 0xe3, 0x66, 0xab, 0xe2, 0xf0, 0xd6, 0x6e, 0x30, 0x7f, 0x4b, 0x3c, 0x6b, 0xdc,
	0x03, 0xaa, 0x8c, 0xb9, 0x0a, 0x86, 0xce, 0x6a, 0x75, 0xe7, 0xb4, 0x51, 0x9f, 0xbd, 0x39, 0xdf,
	0xbf, 0x34, 0x9a, 0x98, 0x64, 0xcb, 0xef, 0xd6, 0xea, 0xe9, 0x46, 0x7d, 0x7b, 0x00, 0xd3, 0x06,
	0xcf, 0xf0, 0x4f, 0x5e, 0x55, 0xc7, 0x8b, 0xb8, 0x17, 0x2d, 0x6f, 0x91, 0x5b, 0x6c, 0x93, 0x7f,
	0x40, 0x16, 0xf1, 0xd0, 0xc3, 0xc4, 0x35, 0x74, 0xd1, 0xd2, 0x8a, 0x0b, 0x7f, 0x1d, 0x03, 0x93,
	0x7e, 0xe7, 0xb3, 0x1b, 0x85, 0x52, 0xd9, 0x6d, 0xc0, 0x47, 0x60, 0xe4, 0xf8, 0xcc, 0x3d, 0xfe,
	0xda, 0x69, 0x9e, 0x57, 0xb8, 0xbe, 0x07, 0xf8, 0xdb, 0x31, 0x8c, 0x11, 0xd6, 0x79, 0x05, 0x3e,
	0x06, 0x23, 0xcd, 0xd2, 0x69, 0xb5, 0xd0, 0x3a, 0x6f, 0xb8, 0xb8, 0xe5, 0x11, 0xf4, 0x21, 0x5f,
	0x9f, 0x02, 0x84, 0x77, 0xde, 0xec, 0x07, 0xbf, 0x51, 0xf6, 0x33, 0x37, 0x7f, 0xc6, 0xd7, 0xa7,
	0x49, 0x06, 0x24, 0xdd, 0x72, 0xe1, 0x6f, 0x62, 0x60, 0x70, 0x97, 0x6d, 0xd4, 0x0b, 0x8c, 0x7f,
	0xf3, 0x03, 0x2f, 0x5b, 0x7d, 0xfc, 0x19, 0x9c, 0xd5, 0xea, 0xf4, 0xda, 0x3f, 0x06, 0xc0, 0x23,
	0x34, 0xdc, 0x13, 0x0f, 0x1f, 0xb4, 0xe6, 0x6f, 0xfa, 0x58, 0x92, 0x0e, 0x99, 0xc3, 0x67, 0xb5,
	0xba, 0xe9, 0x9e, 0x68, 0x45, 0xa8, 0x01, 0xc5, 0x83, 0x0b, 0x45, 0xaa, 0x3f, 0xb2, 0x48, 0x9d,
	0xf7, 0xb1, 0x22, 0x35, 0x64, 0x4e, 0x9c, 0xd5, 0xea, 0x5c, 0xa7, 0x58, 0xf8, 0x97, 0x18, 0x18,
	0xd9, 0x75, 0x0b, 0x8d, 0xd6, 0x91, 0x5b, 0x68, 0xc1, 0x1d, 0x30, 0xd9, 0xa4, 0xf1, 0x76, 0xce,
	0xf0, 0xa8, 0x81, 0x9d, 0x1f, 0x4d, 0x5c, 0x65, 0x27, 0x2b, 0x4e, 0x22, 0xf8, 0x84, 0x63, 0xe6,
	0x44, 0x53, 0x9c, 0x4f, 0x34, 0xa0, 0x30, 0x3b, 0x2d, 0x72, 0x70, 0x78, 0x57, 0xa3, 0x89, 0xd9,
	0x36, 0x43, 0xf4, 0x60, 0xa9, 0x25, 0xb6, 0xbe, 0x7f, 0xde, 0x4f, 0xc0, 0x68, 0xcb, 0x6d, 0xb6,
	0x9c, 0x86, 0xfb, 0x56, 0x9c, 0x3e, 0xea, 0xfc, 0x89, 0x8f, 0x78, 0x18, 0xd3, 0x7d, 0xab, 0x15,
	0x5f, 0xc6, 0xff, 0xe1, 0xdf, 0xe7, 0x62, 0x6b, 0x0b, 0xff, 0x1a, 0x03, 0xa3, 0x36, 0xf9, 0xe5,
	0xb9, 0xdb, 0xfc, 0x3f, 0xb4, 0xb5, 0xf5, 0x85, 0x3f, 0xec, 0x03, 0xe3, 0xa4, 0x03, 0xfb, 0x9b,
	0x5b, 0x67, 0xf3, 0xa0, 0x57, 0xf1, 0x6a, 0x78, 0x67, 0x24, 0x83, 0x86, 0x82, 0x81, 0x29, 0x66,
	0x02, 0x32, 0x0f, 0xba, 0x6f, 0xf5, 0x9a, 0x97, 0x72, 0x6e, 0xb5, 0xe8, 0x13, 0x82, 0x94, 0x53,
	0x78, 0xc2, 0xb0, 0x5b, 0x2d, 0x12, 0x78, 0x48, 0xf8, 0xfa, 0x7f, 0xac, 0xf0, 0x0d, 0x7c, 0x54,
	0xf8, 0x48, 0x34, 0x12, 0x0b, 0x7f, 0x3e, 0x04, 0x06, 0x4d, 0xf7, 0x2b, 0xf7, 0xb8, 0xe5, 0x05,
	0xd4, 0xbb, 0x42, 0xfe, 0xd8, 0x18, 0x44, 0xe1, 0x31, 0xbf, 0xa9, 0x91, 0x86, 0x7b, 0x42, 0xc7,
	0xc6, 0x90, 0x5d, 0xf5, 0xfd, 0x58, 0xbb, 0xea, 0xff, 0xb8, 0xa4, 0x58, 0x04, 0x03, 0x2d, 0xf7,
	0xa2, 0xc5, 0x4d, 0xca, 0x2f, 0x83, 0x6c, 0x88, 0x99, 0xf8, 0xa3, 0x37, 0xff, 0xe3, 0x7e, 0xe4,
	0x16, 0x1d, 0x0c, 0x8e, 0x33, 0xf0, 0x71, 0x8c, 0xeb, 0x2f, 0xa3, 0x14, 0x64, 0x7b, 0x9c, 0x17,
	0x40, 0xe1, 0x39, 0xb8, 0xcf, 0x0c, 0xb2, 0x08, 0x1d, 0xc5, 0xb8, 0x3e, 0x33, 0xc1, 0xf1, 0xbc,
	0x5e, 0xf3, 0x0a, 0x8c, 0x79, 0x71, 0x65, 0x13, 0xf6, 0x10, 0x6e, 0x36, 0x41, 0x8c, 0x4c, 0xf7,
	0x44, 0x1e, 0xb2, 0x5b, 0x7c, 0x6f, 0x04, 0x0d, 0x06, 0xf0, 0xf2, 0xce, 0xb3, 0xd5, 0x2a, 0x9c,
	0xfa, 0xd3, 0x31, 0x71, 0xa0, 0x19, 0x63, 0x3d, 0x20, 0x6e, 0x0e, 0x37, 0xdc, 0x13, 0xbb, 0x70,
	0xaa, 0x15, 0xe1, 0x29, 0xb8, 0x42, 0xdf, 0x4e, 0x4e, 0x03, 0x1f, 0xb2, 0xd3, 0x70, 0x0b, 0xcd,
	0x5a, 0x15, 0x8f, 0xc6, 0x13, 0x89, 0xf9, 0x20, 0xbc, 0xe4, 0x7f, 0x49, 0x26, 0x98, 0x18, 0xc3,
	0x9c, 0x39, 0xe7, 0x6c, 0xef, 0x5e, 0x32, 0x2f, 0x37, 0xdb, 0xb1, 0xb0, 0x08, 0xee, 0x85, 0x2e,
	0x84, 0xc7, 0xe1, 0xc6, 0x37, 0x6e, 0x71, 0x7d, 0x6d, 0xad, 0x5e, 0x3e, 0x6f, 0xe2, 0x51, 0x7a,
	0x88, 0x37, 0x7b, 0x83, 0x9a, 0x5d, 0x08, 0x31, 0x6b, 0x8a, 0x64, 0xf8, 0x14, 0x4c, 0x7a, 0xbb,
	0xe7, 0xdb, 0xe0, 0x28, 0x0b, 0xc1, 0xef, 0xc6, 0xb9, 0x36, 0xe8, 0x45, 0x5c, 0xf5, 0x3b, 0x21,
	0x7c, 0xcd, 0xf1, 0x68, 0x8f, 0x1e, 0xc3, 0x01, 0xb8, 0xc6, 0x1f, 0x42, 0x7b, 0xd3, 0xff, 0x2a,
	0x68, 0xdf, 0x81, 0x49, 0xd2, 0xbd, 0x3f, 0x07, 0xd3, 0x9e, 0xc9, 0xb6, 0xde, 0x3f, 0xce, 0x72,
	0xe9, 0x6b, 0x9e, 0xac, 0x34, 0xdc, 0x93, 0x24, 0xdf, 0xfe, 0xc9, 0xfd, 0xdb, 0xd8, 0xbe, 0x09,
	0xae, 0x87, 0x07, 0xee, 0xbc, 0x5a, 0xaa, 0x55, 0x17, 0x7e, 0xd5, 0x07, 0xc6, 0x2d, 0xaf, 0x4c,
	0x55, 0x8f, 0x5d, 0x2f, 0x1a, 0x2d, 0x2f, 0x03, 0xaa, 0xee, 0xbb, 0xf6, 0x52, 0x75, 0x57, 0xa8,
	0x3c, 0x55, 0xf7, 0x5d, 0x64, 0xe5, 0xf9, 0x9f, 0xbe, 0xa3, 0x1b, 0x60, 0xfc, 0xb4, 0x50, 0x77,
	0x4e, 0x4a, 0xe5, 0x32, 0x79, 0x5e, 0x0d, 0xb0, 0xb7, 0xd2, 0x2f, 0x84, 0xe7, 0xd5, 0x69, 0xa1,
	0xbe, 0x53, 0x2a, 0x97, 0xbd, 0xe7, 0x15, 0x09, 0xd7, 0xe6, 0xc2, 0x7f, 0xf5, 0x83, 0xc1, 0x4c,
	0xed, 0xb4, 0x76, 0xfe, 0xbf, 0xb2, 0x25, 0xf9, 0xd5, 0xa7, 0xff, 0x43, 0xaa, 0xcf, 0xc0, 0x47,
	0x56, 0x9f, 0x78, 0x6f, 0xd5, 0xc7, 0xf6, 0x9e, 0x7e, 0x24, 0xc1, 0x9a, 0xad, 0x42, 0xeb, 0xbc,
	0x49, 0x5f, 0xf8, 0x73, 0xf2, 0xdd, 0xb7, 0xf0, 0x57, 0x96, 0xfb, 0xbf, 0xe4, 0xae, 0xd3, 0xee,
	0x25, 0xd3, 0xd7, 0x60, 0x08, 0x0a, 0x1e, 0x80, 0x5b, 0xa2, 0xd5, 0xb6, 0x8b, 0x3e, 0xc4, 0x2e,
	0x3a, 0xb5, 0x74, 0x83, 0x5a, 0xba, 0x21, 0x58, 0x92, 0xae, 0x38, 0x39, 0xe7, 0xad, 0xed, 0x19,
	0x30, 0x2d, 0xd9, 0x27, 0xf7, 0xe1, 0x2f, 0x27, 0x41, 0xdc, 0x3b, 0xff, 0x2a, 0x34, 0x81, 0xb7,
	0xd3, 0xc6, 0xb7, 0xf5, 0x96, 0x53, 0x71, 0x5b, 0x67, 0x35, 0x32, 0x28, 0xf2, 0xfb, 0x42, 0xe4,
	0x73, 0x16, 0x7f, 0x65, 0xfb, 0x3a, 0xba, 0xc4, 0xf6, 0x15, 0x33, 0xc7, 0x5d, 0x1e, 0xe3, 0x3d,
	0x3a, 0x1a, 0x85, 0x77, 0xe4, 0xd1, 0x11, 0x8c, 0xbb, 0x3f, 0x0f, 0xc6, 0xdd, 0x98, 0x39, 0xd4,
	0x28, 0xbc, 0xf3, 0xdf, 0xe2, 0x3e, 0xb6, 0x7d, 0xd6, 0x75, 0x82, 0x59, 0x37, 0x66, 0x8e, 0x53,
	0x0a, 0xd5, 0x85, 0x42, 0xf2, 0x76, 0xe0, 0xc7, 0xca, 0xdb, 0xf8, 0xc7, 0xe5, 0xed, 0x3a, 0x18,
	0x3b, 0xf3, 0xa6, 0x58, 0xe7, 0xa8, 0xe5, 0x94, 0xaa, 0x2d, 0xae, 0xb1, 0x95, 0x83, 0x68, 0xf5,
	0x99, 0x00, 0x83, 0xb6, 0x5b, 0x5a, 0xb5, 0x05, 0x3f, 0x05, 0xd0, 0x3b, 0xf1, 0x16, 0x7b, 0x25,
	0xe2, 0x9b, 0x3c, 0xc4, 0x6e, 0xf2, 0xaf, 0x82, 0x9b, 0x3c, 0x60, 0x4e, 0x62, 0x28, 0x99, 0x1a,
	0xb0, 0x58, 0xf2, 0x02, 0x28, 0x95, 0xc2, 0x85, 0xe3, 0xbf, 0x0e, 0x9b, 0xa5, 0xef, 0x5c, 0xae,
	0x99, 0xfd, 0x9e, 0x90, 0xcf, 0x95, 0xc2, 0x45, 0x96, 0xe0, 0xac, 0xd2, 0x77, 0x2e, 0x5c, 0x01,
	0xc3, 0xf5, 0x42, 0xb3, 0xf9, 0xae, 0xd6, 0x28, 0xe2, 0x2e, 0x46, 0xce, 0x68, 0x39, 0x78, 0x1a,
	0x0c, 0x9a, 0x0c, 0x00, 0x11, 0x98, 0xc1, 0x33, 0xa2, 0xbf, 0x50, 0xa9, 0x5a, 0x2c, 0x1d, 0x17,
	0x5a, 0xb5, 0x06, 0x27, 0xe9, 0xfc, 0x63, 0x8c, 0x79, 0x3a, 0x68, 0x4e, 0x7b, 0x70, 0xba, 0x9c,
	0xe6, 0x83, 0xbd, 0x35, 0xcf, 0x9b, 0x6e, 0xa3, 0x5a, 0xa8, 0xb8, 0xb8, 0xe1, 0x90, 0x35, 0x1f,
	0x0a, 0x6b, 0xfa, 0x00, 0xf8, 0x33, 0x70, 0xb9, 0xe8, 0x9e, 0x14, 0xce, 0xcb, 0xad, 0x90, 0x86,
	0x73, 0x93, 0x1d, 0x4d, 0x8a, 0x60, 0xda, 0x9b, 0xce, 0x5b, 0xfe, 0xcd, 0xa8, 0x14, 0x45, 0x98,
	0xf7, 0xa8, 0x1e, 0xf3, 0x27, 0x09, 0xfc, 0x76, 0x1c, 0xc7, 0x6f, 0x47, 0xb8, 0x9a, 0x24, 0xa2,
	0x27, 0x1d, 0x14, 0x82, 0xe7, 0x23, 0xa8, 0xb0, 0xdf, 0x40, 0x0d, 0x5c, 0xab, 0x7a, 0xe5, 0xc3,
	0xbd, 0xa8, 0xbb, 0xc7, 0x2d, 0xb7, 0xc8, 0x3f, 0xf3, 0xb1, 0x22, 0x44, 0xe2, 0x7f, 0xa5, 0x9f,
	0x7b, 0x37, 0x5d, 0xf1, 0x18, 0x88, 0x12, 0xd8, 0x23, 0x1f, 0xfe, 0x44, 0xda, 0x25, 0x6d, 0xc7,
	0x93, 0xc1, 0x21, 0xf2, 0xed, 0x98, 0xdf, 0x06, 0x69, 0xc9, 0x69, 0x30, 0xeb, 0xf3, 0xdb, 0x7a,
	0xa8, 0x12, 0x68, 0xa4, 0x71, 0xae, 0x87, 0x4e, 0x53, 0x82, 0xd0, 0x47, 0xdb, 0xca, 0xe9, 0x54,
	0x58, 0x39, 0x1d, 0xee, 0x5e, 0x4e, 0x61, 0x58, 0x39, 0x1d, 0x6e, 0x2b, 0xa7, 0x08, 0xcc, 0xd0,
	0x9a, 0xe1, 0x16, 0x1d, 0xaf, 0x11, 0xb3, 0x64, 0x0c, 0xd4, 0xa2, 0xdf, 0x89, 0x73, 0x0b, 0x4f,
	0x33, 0xb8, 0xee, 0xbe, 0xcb, 0xf9, 0x89, 0x99, 0x01, 0x73, 0xe1, 0x66, 0xb0, 0x2f, 0xd3, 0xcc,
	0x97, 0x5f, 0xc4, 0x39, 0x5f, 0xae, 0x86, 0x99, 0xf2, 0x9c, 0xfa, 0x09, 0x80, 0x81, 0x35, 0xe6,
	0x50, 0xa0, 0x19, 0x7d, 0xc7, 0x3b, 0x34, 0xc5, 0xa0, 0x39, 0xee, 0x9a, 0xb4, 0xf3, 0xb1, 0x27,
	0x33, 0xcc, 0x93, 0x6f, 0x79, 0x4f, 0xa6, 0xdb, 0x6c, 0x78, 0x6e, 0x64, 0xc1, 0xb5, 0x10, 0x33,
	0xb4, 0x3a, 0x07, 0xda, 0xd1, 0x85, 0xd8, 0x59, 0xae, 0xb6, 0xd9, 0xa2, 0xd5, 0xb8, 0x0c, 0x1e,
	0x46, 0x9a, 0x6b, 0x6b, 0x37, 0xb3, 0xac, 0xdd, 0x5c, 0x88, 0xed, 0xe6, 0x7e, 0x84, 0x79, 0x79,
	0xb6, 0x4c, 0x80, 0x31, 0xe1, 0x38, 0x03, 0xd1, 0xe9, 0xd7, 0xfd, 0x5c, 0x12, 0x8e, 0x56, 0xb9,
	0x53, 0x6c, 0xef, 0xad, 0x73, 0x1f, 0xde, 0x5b, 0x63, 0x1f, 0xde, 0x5b, 0xaf, 0x87, 0xf7, 0xd6,
	0x58, 0xe7, 0xde, 0xca, 0xc6, 0x93, 0x1b, 0x61, 0xe3, 0xc9, 0x30, 0x19, 0x4f, 0x48, 0x03, 0x56,
	0xb7, 0xef, 0x80, 0xdb, 0xd1, 0xc1, 0xc7, 0xbd, 0x38, 0xb2, 0x47, 0xff, 0x55, 0x0c, 0x8c, 0xbc,
	0xc9, 0x66, 0xaa, 0xb5, 0xea, 0x8e, 0xf6, 0xe6, 0x23, 0xc7, 0xb4, 0xc1, 0x1f, 0x6d, 0x4c, 0x1b,
	0x8c, 0x78, 0xfa, 0x56, 0x97, 0xff, 0xfe, 0x01, 0x18, 0xe5, 0x1e, 0x5e, 0xf0, 0x31, 0xb8, 0x93,
	0xb5, 0xd2, 0x8e, 0x7d, 0x98, 0x43, 0x8e, 0x9a, 0x7a, 0x95, 0xb7, 0x6c, 0x94, 0x72, 0x72, 0x86,
	0xa5, 0xd9, 0x9a, 0xa1, 0x3b, 0x26, 0xca, 0x19, 0xa6, 0xad, 0x5c, 0x9a, 0x1b, 0xfc, 0xcd, 0xfb,
	0xc5, 0xbe, 0xed, 0x0c, 0xbc, 0x03, 0x66, 0x38, 0xf8, 0x3e, 0x32, 0x6d, 0xcd, 0x42, 0x59, 0xa4,
	0xdb, 0x4a, 0x6c, 0x2e, 0xfe, 0x9b, 0xf7, 0x8b, 0xb1, 0x67, 0x70, 0x19, 0xdc, 0x0e, 0x20, 0x99,
	0x8c, 0x91, 0x54, 0xb1, 0x29, 0x4d, 0xb7, 0x6c, 0x33, 0x9f, 0xf4, 0xfe, 0x59, 0xe9, 0x23, 0xd8,
	0x57, 0x70, 0x15, 0x2c, 0x76, 0xc1, 0x3a, 0x6a, 0x72, 0x4f, 0xe9, 0x27, 0xf8, 0x1c, 0x5c, 0x07,
	0xf7, 0xba, 0xe2, 0x33, 0xc8, 0xb4, 0x95, 0x01, 0xea, 0x71, 0x16, 0xde, 0x07, 0x73, 0x61, 0x14,
	0xba, 0xb3, 0x38, 0xc1, 0xa9, 0x16, 0x5c, 0x06, 0xb7, 0xa2, 0x71, 0xd8, 0x8b, 0x41, 0x8a, 0xb5,
	0xe1, 0x13, 0xde, 0xed, 0x5c, 0x2e, 0xa3, 0x51, 0x70, 0x16, 0x59, 0x96, 0x9a, 0x46, 0xbe, 0xf1,
	0x21, 0xea, 0xc4, 0x21, 0x5c, 0x03, 0x77, 0xbb, 0x10, 0x5e, 0xe7, 0x91, 0x65, 0x2b, 0xc3, 0x94,
	0x71, 0x00, 0x37, 0xc1, 0x52, 0x2f, 0x0c, 0xec, 0xd8, 0x08, 0x65, 0xbd, 0x11, 0x37, 0x6b, 0x59,
	0x5a, 0x5a, 0xf7, 0xce, 0xc6, 0xf7, 0x07, 0xd0, 0x0d, 0x1c, 0xc0, 0xdb, 0x60, 0x9a, 0xe1, 0xb6,
	0xb5, 0x14, 0x5b, 0x7f, 0x94, 0x04, 0xfa, 0x6b, 0x38, 0x0f, 0xae, 0x48, 0x00, 0x2b, 0x67, 0xe8,
	0x16, 0x52, 0xc6, 0x08, 0xa2, 0x0c, 0x57, 0xc0, 0x7c, 0x80, 0xc8, 0x5b, 0x9a, 0x8e, 0x2c, 0x8b,
	0xf3, 0xee, 0x15, 0x4a, 0xda, 0xca, 0x38, 0x01, 0x7f, 0x25, 0x04, 0x37, 0x69, 0x64, 0x32, 0xaa,
	0x8d, 0x4c, 0x35, 0xc3, 0xb9, 0xa8, 0x4c, 0x50, 0xdf, 0x0e, 0xe1, 0x03, 0x70, 0x3d, 0x0c, 0xab,
	0xe9, 0xaf, 0xf3, 0x9a, 0x79, 0xa8, 0x4c, 0xd2, 0xcd, 0x6e, 0xc3, 0x15, 0x2e, 0xd1, 0xda, 0x81,
	0x38, 0x32, 0x0a, 0x05, 0xa7, 0x85, 0xc8, 0x70, 0x60, 0x1a, 0x99, 0x29, 0x8a, 0x53, 0xa3, 0x56,
	0xf7, 0x03, 0x04, 0xa9, 0x9b, 0x6f, 0xe0, 0x12, 0xb8, 0x11, 0x0e, 0xa4, 0x81, 0xba, 0x4c, 0x91,
	0x5f, 0xc2, 0x3b, 0x5c, 0x2c, 0x93, 0x86, 0xbe, 0xa3, 0x99, 0x59, 0x7c, 0x96, 0xca, 0x34, 0x85,
	0xec, 0xc1, 0x7b, 0xe0, 0x5a, 0x28, 0x04, 0x6f, 0xe2, 0x0a, 0x85, 0xe5, 0xe1, 0x43, 0x70, 0x33,
	0x1c, 0xe6, 0xbb, 0x37, 0x43, 0xf7, 0xb1, 0x0b, 0x57, 0xc1, 0x02, 0x0f, 0xb5, 0x4d, 0xd5, 0x3c,
	0x74, 0x34, 0xdd, 0x46, 0x3a, 0x9f, 0xfe, 0x57, 0x29, 0xde, 0x80, 0x4f, 0xc1, 0x4a, 0x80, 0x37,
	0x0d, 0xcb, 0x72, 0x0c, 0x33, 0x85, 0x4c, 0x27, 0xa9, 0xea, 0x49, 0x84, 0xe3, 0x94, 0x51, 0x93,
	0x41, 0xa2, 0xce, 0x92, 0x93, 0x6d, 0x09, 0x37, 0x38, 0x94, 0x47, 0xf0, 0xd7, 0x08, 0xfe, 0x5c,
	0xa8, 0x37, 0x29, 0x64, 0x6a, 0xfb, 0xaa, 0xad, 0xed, 0x23, 0xc7, 0x42, 0xc9, 0xbc, 0xa9, 0xd9,
	0x87, 0x4e, 0x46, 0xb3, 0x6c, 0x65, 0x8e, 0xee, 0x58, 0x85, 0x9b, 0xe0, 0x61, 0x57, 0x38, 0x5b,
	0xe4, 0x3a, 0x59, 0xe4, 0x3b, 0xf8, 0x09, 0x78, 0xd2, 0x9d, 0x95, 0xcf, 0xa5, 0x54, 0x9b, 0xdd,
	0xd5, 0x1b, 0x34, 0x12, 0x26, 0x5c, 0x04, 0xb3, 0x01, 0xd9, 0xd0, 0x6d, 0x67, 0x4f, 0x37, 0x0e,
	0x1c, 0xdb, 0x54, 0x53, 0x48, 0xb9, 0x49, 0x56, 0x78, 0x0d, 0xaf, 0x81, 0x09, 0x06, 0x42, 0x59,
	0x55, 0xcb, 0x28, 0xb7, 0xc8, 0xa7, 0xa4, 0x10, 0x79, 0xf4, 0x06, 0x25, 0xf3, 0xfe, 0x41, 0xea,
	0xc6, 0x41, 0x06, 0xa5, 0xd2, 0xa4, 0x5c, 0xde, 0xa6, 0xeb, 0xe9, 0xf0, 0x2e, 0x77, 0xf6, 0x01,
	0x9e, 0xba, 0x35, 0x4f, 0xac, 0x3e, 0x87, 0x37, 0x01, 0x64, 0xa8, 0x5d, 0xa4, 0x9a, 0xf6, 0x36,
	0x52, 0x6d, 0xe5, 0x0e, 0xf9, 0xbc, 0x06, 0xaf, 0x82, 0x31, 0xf6, 0x59, 0x33, 0x34, 0x65, 0x81,
	0x7c, 0x78, 0x0a, 0x1f, 0x70, 0x69, 0x8a, 0xb7, 0x2d, 0x1d, 0xcc, 0x22, 0x01, 0xee, 0x09, 0x37,
	0x1e, 0x03, 0x89, 0x2f, 0x48, 0xb9, 0x4b, 0x10, 0x19, 0xa1, 0x68, 0x60, 0x84, 0x65, 0xab, 0x76,
	0xde, 0x52, 0xee, 0x11, 0x80, 0xde, 0xbe, 0x16, 0x01, 0xb0, 0xb5, 0xee, 0x13, 0x60, 0x16, 0xde,
	0xe3, 0x2e, 0x23, 0x05, 0x9a, 0xda, 0x1e, 0x72, 0x72, 0xa6, 0x96, 0x44, 0xca, 0x03, 0x02, 0xab,
	0x08, 0x41, 0xce, 0x18, 0x69, 0x43, 0x57, 0x96, 0xc8, 0x27, 0x15, 0xce, 0x81, 0x49, 0xe1, 0x53,
	0xde, 0x56, 0x1e, 0x92, 0x6f, 0x5b, 0x70, 0x83, 0x2b, 0x9d, 0x59, 0xd5, 0xdc, 0x43, 0xb6, 0x93,
	0x52, 0x6d, 0xd5, 0xd1, 0xf4, 0xa4, 0x89, 0x83, 0x8f, 0xaf, 0xe9, 0x8e, 0x89, 0xac, 0x5d, 0x65,
	0x99, 0x90, 0xde, 0x08, 0xbe, 0xf3, 0x24, 0xdf, 0xf7, 0x15, 0x02, 0xdc, 0x17, 0x12, 0x3e, 0x04,
	0xe8, 0x97, 0xbe, 0x47, 0x04, 0x7f, 0x08, 0xb7, 0xc0, 0x72, 0x28, 0xde, 0xd2, 0xd5, 0x9c, 0xb5,
	0x6b, 0xd8, 0xce, 0x4e, 0x3e, 0x13, 0xf8, 0xf3, 0x98, 0xd0, 0x0e, 0x84, 0x7a, 0xe5, 0xd3, 0xd0,
	0x8e, 0xa6, 0xe3, 0xbe, 0xac, 0xac, 0xd2, 0xec, 0xc9, 0x0b, 0xd9, 0xd6, 0x86, 0x63, 0xde, 0x3f,
	0xa1, 0x78, 0x5b, 0xe8, 0x2b, 0xed, 0x78, 0xf1, 0x4e, 0xac, 0x51, 0xd6, 0x3e, 0xbc, 0x05, 0x2e,
	0x73, 0x2c, 0xcb, 0x72, 0x5e, 0xe7, 0x0d, 0x1b, 0x29, 0xeb, 0xc4, 0xdb, 0x92, 0x14, 0x14, 0xff,
	0x7b, 0x5b, 0xd2, 0x27, 0x08, 0xfe, 0x08, 0x26, 0xc0, 0xfd, 0x00, 0x9f, 0xcf, 0xd8, 0x5a, 0x06,
	0xa5, 0x43, 0x0b, 0x8e, 0xb2, 0x41, 0x4b, 0x41, 0x12, 0x7e, 0x0e, 0x36, 0x18, 0x47, 0x47, 0xf6,
	0x81, 0x61, 0xee, 0x39, 0x49, 0x23, 0xaf, 0xdb, 0xc8, 0xcc, 0xa9, 0xa6, 0x7d, 0xe8, 0x58, 0x87,
	0x96, 0x8d, 0xb2, 0x72, 0xd2, 0x6d, 0xd2, 0x4d, 0x24, 0xe1, 0x17, 0x60, 0xf3, 0xc3, 0x0c, 0xd0,
	0x4a, 0xbe, 0x45, 0x2d, 0xa4, 0xe0, 0x2c, 0x18, 0xe7, 0x2c, 0x1c, 0x58, 0xca, 0x53, 0xb2, 0xa1,
	0x6d, 0xa1, 0x68, 0xe8, 0xe8, 0xc0, 0xdf, 0x8b, 0x57, 0x10, 0x95, 0x67, 0x04, 0xd4, 0x84, 0x0b,
	0xe0, 0x6a, 0x08, 0x08, 0x57, 0xbc, 0xe7, 0x04, 0x83, 0x84, 0xfe, 0x13, 0x60, 0xfc, 0x18, 0x29,
	0x2f, 0x68, 0x38, 0xb6, 0x85, 0xb2, 0x11, 0x00, 0x2d, 0x4d, 0x4f, 0x67, 0x90, 0xf2, 0x92, 0x98,
	0x4b, 0x09, 0x69, 0x2d, 0xc5, 0x17, 0xa7, 0xe9, 0x27, 0x04, 0xf8, 0x02, 0xae, 0x71, 0x93, 0x55,
	0xc7, 0xca, 0xff, 0x29, 0x61, 0xa4, 0xe1, 0x12, 0xd7, 0x8c, 0x42, 0x6b, 0xfe, 0x67, 0x04, 0xb9,
	0x23, 0xd4, 0x7c, 0xba, 0x1f, 0x2f, 0x47, 0xd4, 0x24, 0x5f, 0xe9, 0x7e, 0x42, 0xa3, 0xfc, 0xa5,
	0x90, 0xd2, 0x61, 0x70, 0x62, 0xfd, 0x73, 0x82, 0x4f, 0xaa, 0xf0, 0x51, 0xb8, 0xf9, 0xc0, 0x7f,
	0xcf, 0xfc, 0x17, 0xc4, 0x99, 0x06, 0x7c, 0x1c, 0x6e, 0x5d, 0xf2, 0x5d, 0x25, 0xf0, 0xb7, 0x51,
	0xce, 0x48, 0x49, 0xb6, 0x4d, 0x8f, 0x65, 0x27, 0x24, 0x2a, 0x12, 0x34, 0x49, 0x2c, 0xef, 0x0a,
	0x33, 0x21, 0x1b, 0xb8, 0xb3, 0x2a, 0xee, 0xd1, 0x9e, 0x33, 0xbe, 0xe7, 0x29, 0x6a, 0x3b, 0x2b,
	0x4c, 0xbf, 0x11, 0x0c, 0xb2, 0x06, 0xa2, 0x94, 0x0c, 0xbc, 0xcb, 0xe5, 0xa5, 0x3c, 0xd5, 0xef,
	0x50, 0x54, 0x4e, 0x28, 0xb4, 0xe4, 0x66, 0xa7, 0x89, 0x97, 0x96, 0xd0, 0x16, 0xc8, 0xa5, 0x26,
	0x91, 0x52, 0x76, 0x09, 0xe2, 0x4b, 0xe1, 0x49, 0x40, 0x10, 0xbe, 0x1b, 0x1a, 0x81, 0x98, 0xc2,
	0xdc, 0x22, 0x40, 0xfc, 0x34, 0x7c, 0x45, 0x5d, 0x49, 0xc3, 0x45, 0xee, 0x8e, 0xf8, 0x50, 0x7a,
	0x0f, 0xf7, 0x28, 0xe8, 0x95, 0x30, 0x7b, 0x11, 0x10, 0x0b, 0x32, 0xde, 0x59, 0x86, 0x22, 0x35,
	0xe1, 0x38, 0x24, 0x24, 0xf1, 0x31, 0x4b, 0x7c, 0x2c, 0x08, 0x79, 0x61, 0xa2, 0xb4, 0x66, 0xd9,
	0x66, 0xdb, 0xe3, 0xc2, 0x52, 0x74, 0x02, 0xaf, 0x09, 0xf3, 0x52, 0x24, 0x3c, 0xf0, 0xdd, 0x20,
	0xbc, 0xba, 0xd0, 0xb8, 0xe8, 0xe6, 0x73, 0xe4, 0xdb, 0x86, 0x30, 0x25, 0xfb, 0x01, 0xda, 0x31,
	0x4c, 0x76, 0x70, 0x96, 0xf2, 0x9a, 0x6e, 0x4c, 0x17, 0xf2, 0x32, 0x14, 0x8b, 0x47, 0x47, 0x93,
	0xe2, 0x0d, 0xa1, 0xf6, 0x98, 0xc8, 0x42, 0x7a, 0x30, 0xf4, 0x5b, 0x64, 0xfd, 0x04, 0x9c, 0xe7,
	0x1a, 0xbc, 0xb9, 0xf3, 0x9a, 0x01, 0x6c, 0x6a, 0x65, 0x57, 0x28, 0x27, 0x6c, 0x9a, 0xe2, 0xfa,
	0x52, 0x9e, 0x98, 0x2a, 0xc2, 0x27, 0x5c, 0x72, 0x87, 0x00, 0x99, 0xe9, 0x7d, 0x42, 0x38, 0x86,
	0x4f, 0xb9, 0x36, 0x19, 0x46, 0x10, 0x3b, 0xd3, 0x01, 0x2d, 0x16, 0x39, 0x21, 0xfb, 0xc4, 0x21,
	0xf2, 0x0d, 0x31, 0xfd, 0x2d, 0x7c, 0xc8, 0x85, 0x35, 0x7c, 0x70, 0x3c, 0x24, 0xd0, 0x0b, 0xe1,
	0x4e, 0x76, 0x9a, 0x16, 0xbf, 0xa4, 0xeb, 0xef, 0x09, 0x85, 0x9f, 0x31, 0xe8, 0x60, 0xf4, 0x53,
	0x62, 0xf6, 0x44, 0x78, 0x2b, 0x49, 0x20, 0xe6, 0xc3, 0xff, 0x23, 0x60, 0x57, 0x38, 0x29, 0x06,
	0xf6, 0x7e, 0xb2, 0x94, 0x9f, 0x11, 0xcc, 0xbb, 0xf0, 0x2d, 0xf1, 0xb9, 0xa0, 0xfc, 0x7f, 0x02,
	0xfd, 0x46, 0x32, 0xf7, 0x3a, 0x8f, 0x48, 0xa1, 0xb0, 0x90, 0xad, 0x38, 0x04, 0xb3, 0x29, 0xf9,
	0x67, 0xdb, 0x19, 0xdc, 0xae, 0xc5, 0xcc, 0xff, 0x39, 0x01, 0xdb, 0x70, 0x03, 0x3c, 0xe8, 0x02,
	0x66, 0x4e, 0x14, 0x68, 0xe2, 0xec, 0x0b, 0xa5, 0x8b, 0x23, 0x19, 0xdb, 0x19, 0x2d, 0x2d, 0x3c,
	0xc8, 0x8f, 0x68, 0x64, 0x5f, 0x0b, 0x5d, 0xc3, 0xb2, 0x4d, 0xa4, 0x66, 0x43, 0x9e, 0xb4, 0xc7,
	0xb4, 0x0b, 0xa4, 0xc4, 0x15, 0x22, 0xe0, 0xf8, 0x4e, 0x14, 0x29, 0x05, 0x09, 0x77, 0x28, 0x8c,
	0x42, 0x36, 0xe1, 0x52, 0x7c, 0x52, 0xa8, 0x85, 0x36, 0xe2, 0xf2, 0xe7, 0x84, 0xc4, 0x66, 0x5d,
	0x28, 0x74, 0xf8, 0xc5, 0xe0, 0x24, 0xd5, 0x9c, 0x9d, 0x37, 0x59, 0xe2, 0x9c, 0xd2, 0x88, 0x20,
	0x61, 0x7b, 0x61, 0x50, 0xec, 0xeb, 0x19, 0x85, 0x9b, 0xc2, 0xf6, 0x42, 0xe1, 0xbe, 0x2f, 0x25,
	0x4a, 0x49, 0xc1, 0x2d, 0xee, 0xed, 0xd4, 0x89, 0x82, 0x57, 0xfa, 0x8a, 0xd2, 0x5e, 0xb7, 0xed,
	0x41, 0xd3, 0xd3, 0x8e, 0x85, 0x2c, 0xcb, 0x3b, 0x24, 0x7c, 0xb1, 0xbe, 0xa6, 0x47, 0xf4, 0xaa,
	0xcd, 0x29, 0x19, 0xca, 0x9c, 0x2a, 0x53, 0x8a, 0x06, 0x9f, 0x71, 0x75, 0x33, 0x94, 0x22, 0x5e,
	0xb4, 0x0a, 0x25, 0x5a, 0x82, 0xac, 0x24, 0x13, 0xe9, 0x7d, 0xab, 0x92, 0x63, 0x38, 0x83, 0x09,
	0x2e, 0x45, 0xc3, 0xb1, 0xcc, 0xb3, 0x1a, 0xe1, 0x9c, 0xc2, 0x59, 0xae, 0xf8, 0xe5, 0x75, 0x2b,
	0x87, 0x92, 0xda, 0x8e, 0x86, 0x52, 0x4a, 0x5d, 0x18, 0xc5, 0xf3, 0x16, 0x32, 0x1d, 0xdd, 0xb0,
	0xb5, 0x1d, 0x2a, 0xc8, 0x28, 0x6f, 0x69, 0x7a, 0x6c, 0x0b, 0xef, 0x7c, 0x8c, 0xf3, 0xd7, 0x68,
	0xd0, 0x4d, 0x20, 0xb8, 0xc0, 0x55, 0x2b, 0x0a, 0xa1, 0x0d, 0xa2, 0x49, 0x31, 0x3b, 0xc2, 0xac,
	0xfd, 0x26, 0x9b, 0xd1, 0x0d, 0xdd, 0xd9, 0xd1, 0xde, 0x28, 0x2d, 0xe2, 0x68, 0x75, 0xf9, 0x57,
	0xfd, 0x60, 0x5c, 0xf8, 0x3f, 0x50, 0xe0, 0x75, 0x70, 0x55, 0xcd, 0xe5, 0x32, 0xce, 0x3e, 0x32,
	0x1d, 0x2d, 0x25, 0x78, 0x7f, 0x09, 0xce, 0x83, 0x29, 0xfe, 0xe3, 0x8e, 0xf6, 0x26, 0xf1, 0x4c,
	0x89, 0xcd, 0x8d, 0xe0, 0x77, 0xe3, 0xf7, 0xef, 0x17, 0x87, 0x42, 0x10, 0x1b, 0x6b, 0x4a, 0x1f,
	0x41, 0xac, 0x47, 0x20, 0x36, 0xd7, 0x94, 0x7e, 0x82, 0x48, 0x44, 0x21, 0xd6, 0x95, 0x01, 0x82,
	0xd8, 0x88, 0x42, 0x24, 0x94, 0x38, 0x41, 0x6c, 0x46, 0x21, 0x36, 0x94, 0x41, 0x82, 0xd8, 0x8a,
	0x42, 0x6c, 0x2a, 0x43, 0x04, 0xf1, 0x34, 0x02, 0xb1, 0xb5, 0xa6, 0x0c, 0x13, 0xc4, 0x33, 0x8c,
	0x58, 0x04, 0xd3, 0x6d, 0x08, 0x2b, 0xb7, 0xae, 0x8c, 0x10, 0xd0, 0xf3, 0xef, 0xdf, 0x2f, 0x0e,
	0xc3, 0xe5, 0x50, 0x50, 0x42, 0x01, 0x73, 0x0a, 0x1e, 0x97, 0xbf, 0x7f, 0xbf, 0x08, 0x7e, 0xfb,
	0x7e, 0xb1, 0x70, 0xe9, 0xd2, 0xa5, 0xe5, 0x3f, 0x5b, 0x01, 0x13, 0xe2, 0xbf, 0xcd, 0xe2, 0xdd,
	0x0b, 0x13, 0xed, 0x38, 0x1f, 0x22, 0xac, 0xde, 0x03, 0x73, 0x12, 0x25, 0x54, 0x5c, 0x5d, 0x05,
	0x8b, 0x22, 0xac, 0x8b, 0xc0, 0x9a, 0x00, 0x0f, 0x7a, 0xc0, 0x8b, 0x22, 0xeb, 0x16, 0x78, 0xd8,
	0x13, 0x47, 0x12, 0x5a, 0x97, 0xc1, 0xad, 0x28, 0x5a, 0x9b, 0xd8, 0xba, 0x0a, 0x16, 0x3a, 0x63,
	0x25, 0xc1, 0x75, 0x43, 0xde, 0x46, 0x2f, 0xa2, 0xeb, 0x26, 0x58, 0xea, 0x81, 0x24, 0x0b, 0xaf,
	0xcf, 0xc1, 0xa3, 0x5e, 0x59, 0x92, 0xf8, 0xda, 0x16, 0x80, 0x0e, 0x02, 0xec, 0x22, 0x98, 0x15,
	0xb0, 0xa1, 0x22, 0xec, 0x5d, 0x70, 0x2d, 0x04, 0x24, 0x0b, 0xb1, 0x4f, 0xc0, 0x5d, 0x11, 0xd5,
	0x4d, 0x8c, 0x95, 0x83, 0xdf, 0x4d, 0x90, 0x5d, 0x01, 0xb7, 0xa3, 0xf0, 0xed, 0xa2, 0xec, 0x13,
	0x29, 0x41, 0xbb, 0x0a, 0xb3, 0x72, 0xd4, 0x3a, 0x89, 0xb3, 0x1d, 0x3c, 0x69, 0x17, 0x68, 0x1f,
	0x81, 0xf9, 0x68, 0x70, 0x9b, 0x48, 0x7b, 0x4f, 0x8a, 0x75, 0x84, 0x50, 0xfb, 0x10, 0xdc, 0x8c,
	0x84, 0x49, 0x62, 0xed, 0x63, 0x70, 0x27, 0x1a, 0xda, 0x2e, 0xd8, 0x26, 0xc0, 0x7d, 0x19, 0xde,
	0x55, 0xb4, 0x7d, 0x09, 0x9e, 0x88, 0x9c, 0x0f, 0x10, 0x6e, 0xe5, 0xca, 0xd0, 0x8b, 0x78, 0x2b,
	0xd7, 0xb5, 0x1e, 0x04, 0xdc, 0xe7, 0xe0, 0x71, 0x4f, 0x94, 0x76, 0x11, 0xf7, 0x73, 0xb0, 0xd1,
	0x1b, 0x33, 0x4a, 0xc8, 0x7d, 0x00, 0x6e, 0x88, 0x06, 0xa2, 0xc4, 0xdc, 0x9b, 0x00, 0x0a, 0x40,
	0x49, 0xd0, 0x95, 0x4f, 0xa6, 0x17, 0x51, 0x77, 0x49, 0xca, 0x93, 0x68, 0x61, 0xf7, 0x0e, 0x98,
	0x11, 0x90, 0x21, 0xe2, 0xee, 0x75, 0xa0, 0x08, 0x10, 0x41, 0xe0, 0x5d, 0x91, 0xd2, 0xbc, 0xa3,
	0xc8, 0x2b, 0x57, 0x94, 0x70, 0xa1, 0x57, 0x2e, 0x4e, 0xa1, 0x62, 0x6f, 0xe8, 0xba, 0x51, 0x82,
	0xef, 0x43, 0xe9, 0x92, 0x77, 0x10, 0x7d, 0xe5, 0xc3, 0x90, 0x84, 0xdf, 0x5b, 0xe0, 0x72, 0xdb,
	0x67, 0x5e, 0xfc, 0x7d, 0x26, 0x95, 0xef, 0x9e, 0x05, 0x60, 0x79, 0x3f, 0x1d, 0x45, 0x60, 0xf9,
	0xf2, 0xf4, 0x22, 0x04, 0xbf, 0x00, 0xab, 0x91, 0x9c, 0x2e, 0x62, 0xb0, 0x5c, 0x23, 0x3b, 0x09,
	0xc2, 0x72, 0xb6, 0xf6, 0x22, 0x0a, 0x3f, 0x8f, 0x08, 0x5a, 0x77, 0x61, 0x78, 0x01, 0x5c, 0x95,
	0x98, 0xed, 0xe2, 0x70, 0x7b, 0xb0, 0xba, 0x0b, 0xc4, 0x4f, 0xc1, 0xb2, 0xc8, 0xe9, 0x51, 0x24,
	0x4e, 0x82, 0x67, 0x02, 0xef, 0xa3, 0x84, 0xe2, 0x14, 0x78, 0xfe, 0xe1, 0x46, 0xda, 0xc4, 0xe2,
	0x1b, 0x60, 0x4a, 0xb2, 0xc2, 0x0b, 0xc6, 0x72, 0x71, 0x8a, 0x14, 0x8d, 0xef, 0x83, 0xeb, 0x11,
	0x40, 0x51, 0x38, 0x96, 0x7b, 0x63, 0x47, 0xf1, 0x58, 0x2e, 0x4f, 0xd1, 0x02, 0xb2, 0x7c, 0x2d,
	0x3a, 0x8a, 0xc8, 0x9b, 0xd2, 0xe4, 0xd8, 0x9b, 0x90, 0xfc, 0x48, 0x6a, 0x94, 0x9d, 0xc5, 0x64,
	0xb9, 0x07, 0xf5, 0x20, 0x28, 0xcb, 0x57, 0xa2, 0x17, 0x51, 0x79, 0x2d, 0x7a, 0x99, 0x08, 0x61,
	0x79, 0x3d, 0x7a, 0x95, 0x28, 0x71, 0xb9, 0x83, 0x63, 0x91, 0x02, 0x73, 0x78, 0xb4, 0xa2, 0x44,
	0x66, 0x79, 0x06, 0xee, 0x4d, 0x68, 0x96, 0x5f, 0x00, 0x3d, 0x8a, 0xcd, 0x4b, 0x52, 0x4e, 0x47,
	0x0b, 0xce, 0x72, 0x91, 0x97, 0x44, 0x67, 0xb9, 0x4d, 0x85, 0x0b, 0xcf, 0xf2, 0x93, 0x29, 0x42,
	0x7c, 0x96, 0xe7, 0xb0, 0x2e, 0x02, 0xf4, 0x03, 0xe9, 0xbe, 0x45, 0x8a, 0xd0, 0xf2, 0x7c, 0xd9,
	0x59, 0x88, 0x7e, 0x14, 0xea, 0x45, 0x94, 0x18, 0x2d, 0xe7, 0x52, 0x0f, 0x82, 0xb4, 0x3c, 0x0b,
	0x7e, 0x88, 0x28, 0x2d, 0x37, 0x55, 0x59, 0x98, 0x96, 0x5f, 0x0c, 0xdd, 0xc4, 0xe9, 0x44, 0x9b,
	0xfb, 0xdd, 0x05, 0x6a, 0xb9, 0xce, 0x45, 0x89, 0xd4, 0x77, 0xa5, 0xe1, 0x24, 0x5c, 0xa8, 0x96,
	0xcb, 0x56, 0x47, 0xb1, 0x7a, 0x43, 0xba, 0x24, 0x3d, 0x09, 0xd6, 0x2f, 0xa5, 0x76, 0xfe, 0x21,
	0xa2, 0xb5, 0x9c, 0xb9, 0x11, 0xc2, 0xf5, 0x63, 0x29, 0xec, 0x5d, 0xc4, 0xeb, 0xcd, 0xa8, 0x6d,
	0x74, 0x14, 0xb0, 0xe5, 0x46, 0x14, 0x29, 0x62, 0xcb, 0xef, 0xcc, 0xae, 0x42, 0xb6, 0x7c, 0xa2,
	0x51, 0x62, 0x76, 0xe4, 0x36, 0xc3, 0x05, 0xed, 0x76, 0xb3, 0xe1, 0xa2, 0x76, 0xbb, 0xbf, 0x5d,
	0x84, 0xed, 0x67, 0x60, 0xa5, 0x07, 0x42, 0x88, 0xb8, 0x2d, 0x97, 0xcb, 0x1e, 0x05, 0x6e, 0xb9,
	0x93, 0xf5, 0x20, 0x72, 0xb7, 0xad, 0xd4, 0x9b, 0xd0, 0x2d, 0xdf, 0xc7, 0x5e, 0xc4, 0x6e, 0xb9,
	0x06, 0x87, 0x0b, 0xde, 0x72, 0x71, 0xed, 0x22, 0x7a, 0xcb, 0x5b, 0xee, 0x41, 0xf8, 0x96, 0xb7,
	0xdc, 0xa3, 0xf8, 0xfd, 0x42, 0x7a, 0x77, 0x7e, 0x80, 0x00, 0x1e, 0xb6, 0xa7, 0x0e, 0x22, 0x78,
	0x98, 0x83, 0x3d, 0x08, 0xe1, 0x9f, 0x48, 0xf5, 0xfa, 0x83, 0xc4, 0x70, 0x59, 0x06, 0xec, 0x26,
	0x88, 0x3f, 0x95, 0x52, 0xbb, 0x57, 0x51, 0xfc, 0x86, 0x54, 0x6c, 0x45, 0x61, 0x5c, 0x7e, 0x96,
	0x74, 0x12, 0xc7, 0x65, 0x7d, 0x25, 0x42, 0x20, 0xbf, 0x2f, 0x55, 0xc6, 0x28, 0x91, 0x5c, 0x7e,
	0x77, 0x84, 0x09, 0xe5, 0x7f, 0xd7, 0x0f, 0x14, 0xf9, 0x2f, 0xdc, 0xe0, 0x6d, 0x52, 0x3d, 0xa2,
	0xf5, 0xf2, 0xbb, 0xe0, 0x8a, 0x0c, 0x08, 0xd1, 0xcc, 0xc3, 0x51, 0xb2, 0x6e, 0x1e, 0x8e, 0x92,
	0xb5, 0xf3, 0x08, 0x94, 0xa4, 0x9f, 0x47, 0xa0, 0x24, 0x0d, 0x3d, 0x02, 0x25, 0xe9, 0xe8, 0x11,
	0x28, 0x49, 0x4b, 0x0f, 0x47, 0xc9, 0x7a, 0xfa, 0x03, 0x92, 0x22, 0xdd, 0x35, 0xf5, 0xd5, 0x48,
	0x60, 0xb8, 0xae, 0xfe, 0x1e, 0x80, 0xab, 0x11, 0x7f, 0xa1, 0x09, 0xef, 0x81, 0x3b, 0x7e, 0xea,
	0x92, 0x59, 0xc5, 0x31, 0x91, 0x6a, 0x79, 0x1d, 0x57, 0x38, 0xcb, 0x4d, 0x70, 0x2f, 0x1c, 0x96,
	0x34, 0xb2, 0x39, 0xcf, 0x81, 0x9c, 0x69, 0x6c, 0x67, 0x50, 0xd6, 0x3f, 0x5b, 0x6f, 0xfd, 0x38,
	0x7c, 0x06, 0x96, 0xc2, 0x59, 0x29, 0x94, 0x34, 0x0f, 0x73, 0xb8, 0x98, 0xfb, 0xc4, 0xbe, 0x20,
	0x14, 0x71, 0x98, 0x02, 0x5b, 0xe1, 0x44, 0x4d, 0x4f, 0x1a, 0xa6, 0xe9, 0xfd, 0x02, 0xbf, 0xf6,
	0x77, 0x0c, 0x33, 0xab, 0x92, 0x69, 0x68, 0x5f, 0xcd, 0xe4, 0x91, 0x9f, 0x0e, 0x4f, 0xb1, 0x95,
	0xa7, 0xe0, 0x7e, 0x94, 0x95, 0x7d, 0x35, 0xa3, 0xa5, 0x58, 0xd2, 0x2b, 0x03, 0x73, 0xc0, 0xbb,
	0x0e, 0xeb, 0xeb, 0x9d, 0xdd, 0xf6, 0x79, 0xb6, 0x9a, 0x76, 0xf4, 0x7c, 0x76, 0x1b, 0x99, 0x7e,
	0xce, 0xac, 0x61, 0xe2, 0x0b, 0xb0, 0x1c, 0x4e, 0xf4, 0xae, 0xa7, 0x66, 0x22, 0xc2, 0xcc, 0x6a,
	0x96, 0xf7, 0x36, 0xf4, 0x13, 0x89, 0xac, 0x99, 0x04, 0x1b, 0xe1, 0x54, 0x6f, 0x76, 0xf3, 0x0a,
	0x8c, 0xad, 0x65, 0xbd, 0x57, 0x7e, 0x32, 0x6f, 0xaa, 0xc9, 0x43, 0x16, 0xb5, 0x21, 0xea, 0xf8,
	0x1a, 0xdd, 0xf0, 0x83, 0x08, 0x23, 0x5a, 0x5a, 0x57, 0x71, 0xbd, 0xf6, 0x89, 0xc3, 0x41, 0x42,
	0xc5, 0xe1, 0x2b, 0xf0, 0x49, 0x38, 0x0f, 0x6f, 0xd4, 0xa0, 0xfa, 0x05, 0x4a, 0xe1, 0x40, 0xdb,
	0xbb, 0x5a, 0xa0, 0x88, 0xe3, 0xe8, 0x8d, 0x04, 0x77, 0x30, 0x0e, 0x55, 0x90, 0x88, 0xb6, 0xc5,
	0x52, 0xca, 0x39, 0xd0, 0xec, 0x5d, 0x23, 0x6f, 0x3b, 0x2a, 0x39, 0x37, 0x10, 0x5c, 0xbd, 0x38,
	0x4c, 0x80, 0xc5, 0xa8, 0x9c, 0xf4, 0x1d, 0xb1, 0xd5, 0xb4, 0x32, 0x1a, 0x5c, 0xea, 0x0e, 0x67,
	0x86, 0xed, 0x3b, 0x9a, 0x15, 0xa4, 0x8e, 0x32, 0x16, 0xdc, 0xe0, 0x38, 0xdc, 0x07, 0x3b, 0xdd,
	0x52, 0x4d, 0xcf, 0x67, 0x1d, 0x4d, 0x77, 0xd2, 0xa6, 0x91, 0xcf, 0x11, 0xe9, 0x02, 0x07, 0xc2,
	0x44, 0x39, 0xa4, 0xda, 0xde, 0xd9, 0xe0, 0x2f, 0xca, 0x38, 0x3d, 0x0b, 0x2f, 0xf9, 0x06, 0xe1,
	0x43, 0x70, 0x2d, 0xdc, 0xae, 0x6e, 0xe8, 0xca, 0x04, 0x85, 0x3e, 0xc3, 0x50, 0x0d, 0xbc, 0x88,
	0x4a, 0x1b, 0x61, 0x05, 0x67, 0x47, 0x43, 0x99, 0x94, 0xe5, 0x78, 0x71, 0x33, 0x76, 0xc8, 0x7b,
	0x55, 0x99, 0xa4, 0xa6, 0xb6, 0xb0, 0xa9, 0x2f, 0xc0, 0x5a, 0x74, 0xf4, 0xd5, 0x5c, 0x0e, 0xa9,
	0xa6, 0xe5, 0x64, 0x0d, 0x13, 0x39, 0xf6, 0xae, 0xaa, 0x3b, 0x86, 0x9e, 0x44, 0x8a, 0x42, 0x2d,
	0x6c, 0x74, 0x76, 0x46, 0x3c, 0x3f, 0xea, 0x03, 0x4b, 0x6c, 0xe2, 0xcc, 0x14, 0x35, 0xb5, 0x89,
	0x4d, 0xbd, 0x8c, 0xba, 0x0e, 0x6f, 0xb2, 0x19, 0x07, 0xdf, 0x24, 0x32, 0xcf, 0x21, 0xd3, 0x34,
	0x4c, 0x05, 0x52, 0x6e, 0x02, 0x73, 0x57, 0xc0, 0xf5, 0x70, 0xae, 0x61, 0xef, 0x22, 0x53, 0xb9,
	0x4c, 0xc0, 0x2f, 0x5e, 0xe0, 0xca, 0xb9, 0x09, 0x6e, 0x76, 0xbc, 0xb0, 0xca, 0xf4, 0xdc, 0x14,
	0xb6, 0x8d, 0xeb, 0xe7, 0x6f, 0xdf, 0x2f, 0x3e, 0xf7, 0xca, 0xe2, 0x7f, 0x0e, 0x80, 0xa9, 0xb6,
	0x3f, 0xb0, 0x81, 0xb7, 0xc0, 0x9c, 0xd4, 0xcb, 0xc5, 0x4a, 0xb8, 0x11, 0xac, 0x45, 0xbf, 0xab,
	0x49, 0x92, 0x13, 0x19, 0x23, 0xb9, 0x87, 0x52, 0x4a, 0x8c, 0x54, 0xe0, 0xa7, 0xdc, 0x52, 0x50,
	0x05, 0x2b, 0x12, 0xc9, 0x2f, 0x25, 0x5e, 0x5b, 0xd6, 0xd5, 0x2c, 0x72, 0xbc, 0x07, 0x9d, 0x6a,
	0x59, 0x07, 0x86, 0x99, 0x52, 0xfa, 0x88, 0x89, 0x2d, 0xde, 0xc4, 0x6e, 0x70, 0xaf, 0xa8, 0x09,
	0xac, 0xe7, 0x5a, 0x8e, 0x6a, 0x22, 0x7c, 0x47, 0xd5, 0x4c, 0xc6, 0x38, 0x40, 0x29, 0x47, 0xb5,
	0xc9, 0x15, 0xf5, 0x0a, 0x86, 0xd2, 0x4f, 0x2c, 0x3d, 0xe3, 0x2d, 0xe5, 0xc1, 0xe7, 0x92, 0x25,
	0x1d, 0x1d, 0xb0, 0x01, 0xc6, 0x77, 0xc2, 0x49, 0x19, 0xc8, 0xc2, 0x86, 0xbd, 0x12, 0x9f, 0x39,
	0xc4, 0x37, 0xd6, 0xc9, 0x19, 0x19, 0x2d, 0x79, 0xa8, 0x0c, 0x10, 0xb3, 0x1b, 0xbc, 0xd9, 0x2d,
	0x70, 0x5b, 0x32, 0xcb, 0x4c, 0xa1, 0x37, 0x39, 0x2f, 0x49, 0x94, 0x38, 0xa1, 0xf1, 0xa7, 0x10,
	0x12, 0x4f, 0xff, 0x47, 0x35, 0x69, 0x6b, 0xfb, 0x48, 0x19, 0x24, 0xa4, 0x35, 0x9e, 0xf4, 0x69,
	0x50, 0xd9, 0x25, 0x12, 0x51, 0xb1, 0x89, 0xcf, 0xc8, 0x46, 0xca, 0x10, 0x61, 0x6f, 0xf2, 0xec,
	0xcf, 0x82, 0x32, 0x29, 0xb1, 0x99, 0xc7, 0xc9, 0x5d, 0x55, 0x4f, 0xa3, 0x94, 0x32, 0x4c, 0xe8,
	0xeb, 0x3c, 0x3d, 0x09, 0x1e, 0x77, 0xa3, 0xa7, 0xf2, 0xc8, 0xb1, 0x0d, 0xba, 0x6f, 0x65, 0x84,
	0x18, 0x49, 0xf0, 0xc9, 0xf7, 0xb7, 0x7d, 0x60, 0xaa, 0xed, 0x2f, 0x8c, 0xbd, 0xe4, 0x43, 0x3a,
	0x6e, 0x8d, 0x4e, 0x16, 0xd9, 0xbb, 0x86, 0x3c, 0x52, 0xdd, 0x01, 0x50, 0xfa, 0x9e, 0x42, 0x96,
	0xdf, 0x73, 0x3d, 0xfb, 0x31, 0xb8, 0x00, 0x2e, 0x4b, 0x10, 0xdd, 0xd0, 0x91, 0xdf, 0x5e, 0xd7,
	0x22, 0x30, 0xb9, 0xbd, 0xa4, 0xe5, 0x37, 0xcf, 0x75, 0x8c, 0xb9, 0x07, 0x66, 0x42, 0x30, 0xde,
	0x72, 0xdc, 0x30, 0x15, 0xf3, 0x46, 0x1b, 0x19, 0x96, 0xce, 0x79, 0x28, 0x6e, 0x98, 0xea, 0x0b,
	0xf1, 0x3b, 0x87, 0xb2, 0x7e, 0x03, 0xf4, 0x6e, 0x4a, 0xbf, 0x37, 0xfd, 0x84, 0x1a, 0xca, 0xa6,
	0xb6, 0xfc, 0x61, 0xca, 0xbb, 0x0f, 0xfd, 0xcb, 0xff, 0xd6, 0x0f, 0xa6, 0xc3, 0xfe, 0xfa, 0x15,
	0x2e, 0x82, 0xdb, 0x29, 0xb4, 0xa3, 0xe6, 0x33, 0x76, 0x87, 0xa1, 0x74, 0x09, 0x5c, 0x0b, 0x03,
	0x85, 0x0c, 0xa6, 0xd1, 0x48, 0x79, 0x38, 0x8d, 0x46, 0xca, 0x03, 0x6a, 0x07, 0xa4, 0x34, 0xa4,
	0x76, 0x40, 0x4a, 0x83, 0x6a, 0x07, 0xa4, 0x34, 0xac, 0x76, 0x40, 0x4a, 0x03, 0x6b, 0x34, 0x52,
	0x1e, 0x5a, 0x57, 0xc0, 0x8d, 0x48, 0x64, 0xdb, 0xe0, 0x9a, 0xe8, 0x08, 0x0e, 0x1d, 0x5e, 0xb7,
	0x1f, 0x81, 0xb9, 0x5a, 0xe3, 0x74, 0xf5, 0xa4, 0x74, 0x81, 0xff, 0x83, 0x8c, 0xc7, 0xb5, 0xf2,
	0xea, 0x71, 0xad, 0x52, 0xaf, 0x55, 0xdd, 0x6a, 0xab, 0xb9, 0xed, 0xff, 0xc7, 0x1c, 0xbf, 0x8c,
	0x57, 0x6a, 0x45, 0xb7, 0x7c, 0x34, 0x88, 0x41, 0x1b, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x5b,
	0x4f, 0x76, 0x0a, 0xf4, 0x51, 0x00, 0x00,
}
