// Code generated by protoc-gen-go. DO NOT EDIT.
// source: market-data-service.proto

package api

import (
	"github.com/ettec/open-trading-platform/go/model"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MdsSubscribeRequest struct {
	ListingId            int32    `protobuf:"varint,1,opt,name=listingId,proto3" json:"listingId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MdsSubscribeRequest) Reset()         { *m = MdsSubscribeRequest{} }
func (m *MdsSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*MdsSubscribeRequest) ProtoMessage()    {}
func (*MdsSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d3bea125c825790, []int{0}
}

func (m *MdsSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MdsSubscribeRequest.Unmarshal(m, b)
}
func (m *MdsSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MdsSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *MdsSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MdsSubscribeRequest.Merge(m, src)
}
func (m *MdsSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_MdsSubscribeRequest.Size(m)
}
func (m *MdsSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MdsSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MdsSubscribeRequest proto.InternalMessageInfo

func (m *MdsSubscribeRequest) GetListingId() int32 {
	if m != nil {
		return m.ListingId
	}
	return 0
}

func init() {
	proto.RegisterType((*MdsSubscribeRequest)(nil), "marketdataservice.MdsSubscribeRequest")
}

func init() { proto.RegisterFile("market-data-service.proto", fileDescriptor_2d3bea125c825790) }

var fileDescriptor_2d3bea125c825790 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcc, 0x4d, 0x2c, 0xca,
	0x4e, 0x2d, 0xd1, 0x4d, 0x49, 0x2c, 0x49, 0xd4, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x84, 0x48, 0x81, 0x64, 0xa0, 0x12, 0x52, 0x82, 0xb9,
	0xf9, 0x29, 0xa9, 0x39, 0xc9, 0xf9, 0xb9, 0xb9, 0xf9, 0x79, 0x10, 0x55, 0x52, 0xfc, 0xc9, 0x39,
	0xf9, 0x49, 0x85, 0xa5, 0xf9, 0x25, 0x50, 0x6d, 0x4a, 0xc6, 0x5c, 0xc2, 0xbe, 0x29, 0xc5, 0xc1,
	0xa5, 0x49, 0xc5, 0xc9, 0x45, 0x99, 0x49, 0xa9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42,
	0x32, 0x5c, 0x9c, 0x39, 0x99, 0xc5, 0x25, 0x99, 0x79, 0xe9, 0x9e, 0x29, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0xac, 0x41, 0x08, 0x01, 0xa3, 0x38, 0x2e, 0x41, 0x5f, 0xb0, 0x6d, 0x2e, 0x89, 0x25, 0x89,
	0xc1, 0x10, 0xdb, 0x84, 0x3c, 0xb9, 0xd8, 0x9d, 0xf3, 0xf3, 0xf2, 0x52, 0x93, 0x4b, 0x84, 0xd4,
	0xf4, 0x30, 0x1c, 0xa3, 0x87, 0xc5, 0x16, 0x29, 0x01, 0x3d, 0xb0, 0x0b, 0xf5, 0x9c, 0x73, 0xf2,
	0x93, 0x02, 0x41, 0x8e, 0x52, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x74, 0x62, 0x8d, 0x62, 0x4e, 0x2c,
	0xc8, 0x4c, 0x62, 0x03, 0x3b, 0xd1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x34, 0x41, 0x54,
	0xf6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MarketDataServiceClient is the client API for MarketDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MarketDataServiceClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (MarketDataService_ConnectClient, error)
}

type marketDataServiceClient struct {
	cc *grpc.ClientConn
}

func NewMarketDataServiceClient(cc *grpc.ClientConn) MarketDataServiceClient {
	return &marketDataServiceClient{cc}
}

func (c *marketDataServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (MarketDataService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MarketDataService_serviceDesc.Streams[0], "/marketdataservice.MarketDataService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &marketDataServiceConnectClient{stream}
	return x, nil
}

type MarketDataService_ConnectClient interface {
	Send(*MdsSubscribeRequest) error
	Recv() (*model.ClobQuote, error)
	grpc.ClientStream
}

type marketDataServiceConnectClient struct {
	grpc.ClientStream
}

func (x *marketDataServiceConnectClient) Send(m *MdsSubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *marketDataServiceConnectClient) Recv() (*model.ClobQuote, error) {
	m := new(model.ClobQuote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MarketDataServiceServer is the server API for MarketDataService service.
type MarketDataServiceServer interface {
	Connect(MarketDataService_ConnectServer) error
}

// UnimplementedMarketDataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMarketDataServiceServer struct {
}

func (*UnimplementedMarketDataServiceServer) Connect(srv MarketDataService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterMarketDataServiceServer(s *grpc.Server, srv MarketDataServiceServer) {
	s.RegisterService(&_MarketDataService_serviceDesc, srv)
}

func _MarketDataService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MarketDataServiceServer).Connect(&marketDataServiceConnectServer{stream})
}

type MarketDataService_ConnectServer interface {
	Send(*model.ClobQuote) error
	Recv() (*MdsSubscribeRequest, error)
	grpc.ServerStream
}

type marketDataServiceConnectServer struct {
	grpc.ServerStream
}

func (x *marketDataServiceConnectServer) Send(m *model.ClobQuote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *marketDataServiceConnectServer) Recv() (*MdsSubscribeRequest, error) {
	m := new(MdsSubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MarketDataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "marketdataservice.MarketDataService",
	HandlerType: (*MarketDataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _MarketDataService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "market-data-service.proto",
}
