// Code generated by protoc-gen-go. DO NOT EDIT.
// source: clobquote.proto

package model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClobLine struct {
	Size                 *Decimal64 `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	Price                *Decimal64 `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	EntryId              string     `protobuf:"bytes,3,opt,name=entryId,proto3" json:"entryId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ClobLine) Reset()         { *m = ClobLine{} }
func (m *ClobLine) String() string { return proto.CompactTextString(m) }
func (*ClobLine) ProtoMessage()    {}
func (*ClobLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_eff833333d312bfe, []int{0}
}

func (m *ClobLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClobLine.Unmarshal(m, b)
}
func (m *ClobLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClobLine.Marshal(b, m, deterministic)
}
func (m *ClobLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClobLine.Merge(m, src)
}
func (m *ClobLine) XXX_Size() int {
	return xxx_messageInfo_ClobLine.Size(m)
}
func (m *ClobLine) XXX_DiscardUnknown() {
	xxx_messageInfo_ClobLine.DiscardUnknown(m)
}

var xxx_messageInfo_ClobLine proto.InternalMessageInfo

func (m *ClobLine) GetSize() *Decimal64 {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *ClobLine) GetPrice() *Decimal64 {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *ClobLine) GetEntryId() string {
	if m != nil {
		return m.EntryId
	}
	return ""
}

type ClobQuote struct {
	ListingId            int32       `protobuf:"varint,1,opt,name=listingId,proto3" json:"listingId,omitempty"`
	Bids                 []*ClobLine `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
	Offers               []*ClobLine `protobuf:"bytes,3,rep,name=offers,proto3" json:"offers,omitempty"`
	StreamInterrupted    bool        `protobuf:"varint,4,opt,name=streamInterrupted,proto3" json:"streamInterrupted,omitempty"`
	StreamStatusMsg      string      `protobuf:"bytes,5,opt,name=streamStatusMsg,proto3" json:"streamStatusMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ClobQuote) Reset()         { *m = ClobQuote{} }
func (m *ClobQuote) String() string { return proto.CompactTextString(m) }
func (*ClobQuote) ProtoMessage()    {}
func (*ClobQuote) Descriptor() ([]byte, []int) {
	return fileDescriptor_eff833333d312bfe, []int{1}
}

func (m *ClobQuote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClobQuote.Unmarshal(m, b)
}
func (m *ClobQuote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClobQuote.Marshal(b, m, deterministic)
}
func (m *ClobQuote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClobQuote.Merge(m, src)
}
func (m *ClobQuote) XXX_Size() int {
	return xxx_messageInfo_ClobQuote.Size(m)
}
func (m *ClobQuote) XXX_DiscardUnknown() {
	xxx_messageInfo_ClobQuote.DiscardUnknown(m)
}

var xxx_messageInfo_ClobQuote proto.InternalMessageInfo

func (m *ClobQuote) GetListingId() int32 {
	if m != nil {
		return m.ListingId
	}
	return 0
}

func (m *ClobQuote) GetBids() []*ClobLine {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *ClobQuote) GetOffers() []*ClobLine {
	if m != nil {
		return m.Offers
	}
	return nil
}

func (m *ClobQuote) GetStreamInterrupted() bool {
	if m != nil {
		return m.StreamInterrupted
	}
	return false
}

func (m *ClobQuote) GetStreamStatusMsg() string {
	if m != nil {
		return m.StreamStatusMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*ClobLine)(nil), "model.ClobLine")
	proto.RegisterType((*ClobQuote)(nil), "model.ClobQuote")
}

func init() { proto.RegisterFile("clobquote.proto", fileDescriptor_eff833333d312bfe) }

var fileDescriptor_eff833333d312bfe = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x18, 0xc4, 0x95, 0x26, 0x69, 0x9b, 0xaf, 0x43, 0xa8, 0x27, 0x0b, 0x31, 0x44, 0x05, 0x41, 0x06,
	0x94, 0xa1, 0x20, 0x1e, 0x00, 0x58, 0x22, 0xc1, 0x80, 0xd9, 0xd8, 0x92, 0xf8, 0x6b, 0x65, 0xc9,
	0x7f, 0x82, 0xed, 0x0c, 0xf0, 0x92, 0xbc, 0x12, 0xaa, 0xd3, 0x0a, 0x09, 0xe8, 0x64, 0xf9, 0x7e,
	0x27, 0xdd, 0x7d, 0x07, 0x79, 0x27, 0x4d, 0xfb, 0x3e, 0x18, 0x8f, 0x55, 0x6f, 0x8d, 0x37, 0x24,
	0x55, 0x86, 0xa3, 0x3c, 0x5d, 0x86, 0xa7, 0x33, 0x4a, 0x19, 0x3d, 0x92, 0x95, 0x85, 0xf9, 0x83,
	0x34, 0xed, 0x93, 0xd0, 0x48, 0x2e, 0x20, 0x71, 0xe2, 0x13, 0x69, 0x54, 0x44, 0xe5, 0x62, 0x7d,
	0x52, 0x05, 0x77, 0xf5, 0x88, 0x9d, 0x50, 0x8d, 0xbc, 0xbb, 0x65, 0x81, 0x92, 0x4b, 0x48, 0x7b,
	0x2b, 0x3a, 0xa4, 0x93, 0x23, 0xb6, 0x11, 0x13, 0x0a, 0x33, 0xd4, 0xde, 0x7e, 0xd4, 0x9c, 0xc6,
	0x45, 0x54, 0x66, 0xec, 0xf0, 0x5d, 0x7d, 0x45, 0x90, 0xed, 0x42, 0x5f, 0x76, 0x0d, 0xc9, 0x19,
	0x64, 0x52, 0x38, 0x2f, 0xf4, 0xb6, 0xe6, 0x21, 0x3a, 0x65, 0x3f, 0x02, 0x39, 0x87, 0xa4, 0x15,
	0xdc, 0xd1, 0x49, 0x11, 0x97, 0x8b, 0x75, 0xbe, 0x0f, 0x3b, 0x54, 0x66, 0x01, 0x92, 0x2b, 0x98,
	0x9a, 0xcd, 0x06, 0xad, 0xa3, 0xf1, 0xff, 0xb6, 0x3d, 0x26, 0xd7, 0xb0, 0x74, 0xde, 0x62, 0xa3,
	0x6a, 0xed, 0xd1, 0xda, 0xa1, 0xf7, 0xc8, 0x69, 0x52, 0x44, 0xe5, 0x9c, 0xfd, 0x05, 0xa4, 0x84,
	0x7c, 0x14, 0x5f, 0x7d, 0xe3, 0x07, 0xf7, 0xec, 0xb6, 0x34, 0x0d, 0x97, 0xfc, 0x96, 0xef, 0x67,
	0x6f, 0xe3, 0xc2, 0xed, 0x34, 0xac, 0x7a, 0xf3, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x49, 0xa6, 0xcc,
	0xbf, 0x82, 0x01, 0x00, 0x00,
}
